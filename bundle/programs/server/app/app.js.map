{"version":3,"sources":["meteor://💻app/imports/api/context/contextManager.ts","meteor://💻app/imports/api/mcp/aidboxServerConnection.ts","meteor://💻app/imports/api/mcp/epicServerConnection.ts","meteor://💻app/imports/api/mcp/mcpClientManager.ts","meteor://💻app/imports/api/mcp/medicalServerConnection.ts","meteor://💻app/imports/api/messages/messages.ts","meteor://💻app/imports/api/messages/methods.ts","meteor://💻app/imports/api/messages/publications.ts","meteor://💻app/imports/api/sessions/methods.ts","meteor://💻app/imports/api/sessions/publications.ts","meteor://💻app/imports/api/sessions/sessions.ts","meteor://💻app/server/startup-sessions.ts","meteor://💻app/server/main.ts"],"names":["module","export","ContextManager","MessagesCollection","link","v","SessionsCollection","__reifyWaitForDeps__","getContext","sessionId","context","contexts","get","loadContextFromDB","set","recentMessages","find","sort","timestamp","limit","MAX_MESSAGES","fetchAsync","session","findOneAsync","reverse","maxContextLength","MAX_CONTEXT_LENGTH","totalTokens","metadata","patientContext","patientId","documentContext","documentIds","medicalEntities","extractMedicalEntities","calculateTokens","trimContext","updateContext","newMessage","push","role","entities","extractEntitiesFromMessage","content","length","slice","persistContext","shift","totalChars","map","msg","join","e","concat","text","label","Math","ceil","buildContextPrompt","parts","entitySummary","summarizeMedicalEntities","conversation","grouped","reduce","acc","entity","summary","Object","entries","_ref","texts","unique","Set","messages","patterns","MEDICATION","CONDITION","SYMPTOM","forEach","_ref2","pattern","match","exec","trim","medicalTerms","PROCEDURE","_ref3","terms","term","toLowerCase","includes","sentences","split","sentence","extracted","substring","_context$medicalEntit","_context$recentMessag","updateAsync","$set","lastMessage","messageCount","countDocuments","updatedAt","Date","clearContext","delete","clearAllContexts","clear","getContextStats","size","tokens","Map","__reify_async_result__","_reifyError","self","async","_objectSpread","default","AidboxServerConnection","createAidboxOperations","constructor","baseUrl","arguments","undefined","isInitialized","requestId","replace","connect","_toolsResult$tools","console","log","healthCheck","checkServerHealth","ok","Error","initResult","sendRequest","protocolVersion","capabilities","roots","listChanged","clientInfo","name","version","sendNotification","toolsResult","tools","tool","index","description","error","response","fetch","method","headers","signal","AbortSignal","timeout","health","json","status","message","params","id","request","jsonrpc","body","JSON","stringify","responseSessionId","errorText","statusText","result","code","notification","warn","listTools","callTool","args","disconnect","connection","searchPatients","query","_result$content","_result$content$","parse","getPatientDetails","_result$content2","_result$content2$","createPatient","patientData","_result$content3","_result$content3$","updatePatient","updates","_result$content4","_result$content4$","getPatientObservations","_result$content5","_result$content5$","options","createObservation","observationData","_result$content6","_result$content6$","getPatientMedications","_result$content7","_result$content7$","createMedicationRequest","medicationData","_result$content8","_result$content8$","getPatientConditions","_result$content9","_result$content9$","createCondition","conditionData","_result$content0","_result$content0$","getPatientEncounters","_result$content1","_result$content1$","createEncounter","encounterData","_result$content10","_result$content10$","EpicServerConnection","createEpicOperations","MCPClientManager","Anthropic","MedicalServerConnection","createMedicalOperations","anthropic","config","medicalConnection","medicalOperations","availableTools","aidboxConnection","aidboxOperations","aidboxTools","epicConnection","epicOperations","epicTools","getInstance","instance","initialize","provider","apiKey","connectToMedicalServer","_global$Meteor","_global$Meteor$settin","settings","global","Meteor","private","mcpServerUrl","MEDICAL_MCP_SERVER_URL","process","env","t","connectToAidboxServer","_global$Meteor2","_global$Meteor2$setti","aidboxServerUrl","AIDBOX_MCP_SERVER_URL","mergeToolsUnique","logAvailableTools","connectToEpicServer","_global$Meteor3","_global$Meteor3$setti","epicServerUrl","EPIC_MCP_SERVER_URL","existingTools","newTools","toolNameSet","uniqueNewTools","filter","has","add","mergedTools","startsWith","isAidboxFHIRTool","documentTools","isDocumentTool","analysisTools","isAnalysisTool","otherTools","_tool$description","_tool$description2","_tool$description3","_tool$description4","_tool$description5","debugToolDuplicates","aidboxFHIRToolNames","documentToolNames","analysisToolNames","toolNames","nameCount","duplicates","Array","from","count","filterToolsByDataSource","dataSource","_tool$description6","_tool$description7","_tool$description8","analyzeQueryIntent","lowerQuery","intent","getAnthropicTools","uniqueTools","_tool$inputSchema","_tool$inputSchema2","input_schema","type","properties","inputSchema","required","toolsArray","values","validateToolsForAnthropic","nameSet","validTools","callMCPTool","toolName","epicToolNames","aidboxToolNames","medicalToolNames","availableTool","availableToolNames","callEpicTool","epic","aidbox","medical","epicHealth","aidboxHealth","medicalHealth","processQueryWithIntelligentToolSelection","processWithAnthropicIntelligent","processWithOzwellIntelligent","_error$message","_error$message2","_error$message3","NODE_ENV","queryIntent","contextInfo","systemPrompt","conversationHistory","finalResponse","iterations","maxIterations","maxRetries","retryCount","create","model","max_tokens","system","tool_choice","delay","pow","Promise","resolve","setTimeout","hasToolUse","assistantResponse","input","toolResult","tool_use_id","formatToolResult","is_error","_this$config","endpoint","ozwellEndpoint","availableToolsDescription","_this$config2","_data$choices","_data$choices$","prompt","temperature","stream","data","choices","completion","processQueryWithMedicalContext","getAvailableTools","isToolAvailable","some","getMedicalOperations","getEpicOperations","getAidboxOperations","switchProvider","toUpperCase","getCurrentProvider","_this$config3","getAvailableProviders","_global$Meteor4","_global$Meteor4$setti","anthropicKey","ANTHROPIC_API_KEY","ozwellKey","OZWELL_API_KEY","providers","isReady","getConfig","shutdown","contentType","handleStreamingResponse","responseText","reject","_response$body","reader","getReader","decoder","TextDecoder","buffer","processChunk","done","value","read","decode","lines","pop","line","parsed","cancel","catch","uploadDocument","file","filename","mimeType","title","fileBuffer","toString","fileType","searchDocuments","threshold","listDocuments","offset","documentId","findSimilarCases","criteria","analyzePatientHistory","analysisType","dateRange","getMedicalInsights","extractText","_id","documents","success","extractedText","confidence","searchByDiagnosis","patientIdentifier","diagnosisQuery","semanticSearch","getPatientSummary","Mongo","Collection","extractAndUpdateContext","extractMedicalTermsFromResponse","extractDataSources","sanitizePatientName","check","Match","methods","messages.insert","messageData","String","messageId","insertAsync","$inc","call","mcp.processQuery","Maybe","isSimulation","mcpManager","_session$metadata","contextData","conversationContext","mcp.switchProvider","mcp.getCurrentProvider","mcp.getAvailableProviders","_Meteor$settings","mcp.getAvailableTools","mcp.healthCheck","servers","medical.uploadDocument","fileData","patientName","now","_this$connection","estimatedFileSize","round","Buffer","uploadedBy","userId","uploadDate","toISOString","$addToSet","updateError","_error$message4","_error$message5","medical.processDocument","textExtraction","diagnosisCount","medicationCount","labResultCount","patientMatch","$each","dataSources","medicalPatterns","sources","word","charAt","publish","sessions.create","createdAt","isActive","multi","sessions.list","Integer","sessions","skip","total","hasMore","sessions.get","sessions.update","sessions.delete","deletedMessages","removeAsync","sessions.setActive","sessions.generateTitle","firstUserMessage","sessions.updateMetadata","sessions.export","exportedAt","sessions.import","newSession","Number","fields","startup","createIndexAsync","thirtyDaysAgo","setDate","getDate","oldSessions","$lt","totalSessions","totalMessages","activeSessions","OZWELL_ENDPOINT","toolCategories","categorizeTools","categories","category","isSearchAnalysisTool","on","require","then","exit","reason","promise"],"mappings":"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","file":"/app.js","sourcesContent":["import { MessagesCollection, Message } from '../messages/messages';\nimport { SessionsCollection } from '../sessions/sessions';\n\nexport interface ConversationContext {\n  sessionId: string;\n  recentMessages: Message[];\n  patientContext?: string;\n  documentContext?: string[];\n  medicalEntities?: Array<{text: string, label: string}>;\n  maxContextLength: number;\n  totalTokens: number;\n}\n\nexport class ContextManager {\n  private static contexts = new Map<string, ConversationContext>();\n  private static readonly MAX_CONTEXT_LENGTH = 4000; // Adjust based on model\n  private static readonly MAX_MESSAGES = 20;\n  \n  static async getContext(sessionId: string): Promise<ConversationContext> {\n    let context = this.contexts.get(sessionId);\n    \n    if (!context) {\n      // Load context from database\n      context = await this.loadContextFromDB(sessionId);\n      this.contexts.set(sessionId, context);\n    }\n    \n    return context;\n  }\n  \n  private static async loadContextFromDB(sessionId: string): Promise<ConversationContext> {\n    // Load recent messages\n    const recentMessages = await MessagesCollection.find(\n      { sessionId },\n      { \n        sort: { timestamp: -1 }, \n        limit: this.MAX_MESSAGES \n      }\n    ).fetchAsync();\n    \n    // Load session metadata\n    const session = await SessionsCollection.findOneAsync(sessionId);\n    \n    const context: ConversationContext = {\n      sessionId,\n      recentMessages: recentMessages.reverse(),\n      maxContextLength: this.MAX_CONTEXT_LENGTH,\n      totalTokens: 0\n    };\n    \n    // Add metadata from session\n    if (session?.metadata) {\n      context.patientContext = session.metadata.patientId;\n      context.documentContext = session.metadata.documentIds;\n    }\n    \n    // Extract medical entities from recent messages\n    context.medicalEntities = this.extractMedicalEntities(recentMessages);\n    \n    // Calculate token usage\n    context.totalTokens = this.calculateTokens(context);\n    \n    // Trim if needed\n    this.trimContext(context);\n    \n    return context;\n  }\n  \n  static async updateContext(sessionId: string, newMessage: Message) {\n    const context = await this.getContext(sessionId);\n    \n    // Add new message\n    context.recentMessages.push(newMessage);\n    \n    // Update medical entities if message contains them\n    if (newMessage.role === 'assistant') {\n      const entities = this.extractEntitiesFromMessage(newMessage.content);\n      if (entities.length > 0) {\n        context.medicalEntities = [\n          ...(context.medicalEntities || []),\n          ...entities\n        ].slice(-50); // Keep last 50 entities\n      }\n    }\n    \n    // Recalculate tokens and trim\n    context.totalTokens = this.calculateTokens(context);\n    this.trimContext(context);\n    \n    this.contexts.set(sessionId, context);\n    \n    // Persist important context back to session\n    await this.persistContext(sessionId, context);\n  }\n  \n  private static trimContext(context: ConversationContext) {\n    while (context.totalTokens > context.maxContextLength && context.recentMessages.length > 2) {\n      // Remove oldest messages, but keep at least 2\n      context.recentMessages.shift();\n      context.totalTokens = this.calculateTokens(context);\n    }\n  }\n  \n  private static calculateTokens(context: ConversationContext): number {\n    // Rough estimation: 1 token ≈ 4 characters\n    let totalChars = 0;\n    \n    // Count message content\n    totalChars += context.recentMessages\n      .map(msg => msg.content)\n      .join(' ').length;\n    \n    // Count metadata\n    if (context.patientContext) {\n      totalChars += context.patientContext.length + 20; // Include label\n    }\n    \n    if (context.documentContext) {\n      totalChars += context.documentContext.join(' ').length + 30;\n    }\n    \n    if (context.medicalEntities) {\n      totalChars += context.medicalEntities\n        .map(e => `${e.text} (${e.label})`)\n        .join(', ').length;\n    }\n    \n    return Math.ceil(totalChars / 4);\n  }\n  \n  static buildContextPrompt(context: ConversationContext): string {\n    const parts: string[] = [];\n    \n    // Add patient context\n    if (context.patientContext) {\n      parts.push(`Current Patient: ${context.patientContext}`);\n    }\n    \n    // Add document context\n    if (context.documentContext && context.documentContext.length > 0) {\n      parts.push(`Related Documents: ${context.documentContext.slice(0, 5).join(', ')}`);\n    }\n    \n    // Add medical entities summary\n    if (context.medicalEntities && context.medicalEntities.length > 0) {\n      const entitySummary = this.summarizeMedicalEntities(context.medicalEntities);\n      parts.push(`Medical Context: ${entitySummary}`);\n    }\n    \n    // Add conversation history\n    if (context.recentMessages.length > 0) {\n      const conversation = context.recentMessages\n        .map(msg => `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}`)\n        .join('\\n');\n      \n      parts.push(`Recent Conversation:\\n${conversation}`);\n    }\n    \n    return parts.join('\\n\\n');\n  }\n  \n  private static summarizeMedicalEntities(entities: Array<{text: string, label: string}>): string {\n    const grouped = entities.reduce((acc, entity) => {\n      if (!acc[entity.label]) {\n        acc[entity.label] = [];\n      }\n      acc[entity.label].push(entity.text);\n      return acc;\n    }, {} as Record<string, string[]>);\n    \n    const summary = Object.entries(grouped)\n      .map(([label, texts]) => {\n        const unique = [...new Set(texts)].slice(0, 5);\n        return `${label}: ${unique.join(', ')}`;\n      })\n      .join('; ');\n    \n    return summary;\n  }\n  \n  private static extractMedicalEntities(messages: Message[]): Array<{text: string, label: string}> {\n    const entities: Array<{text: string, label: string}> = [];\n    \n    // Simple extraction - look for patterns\n    const patterns = {\n      MEDICATION: /\\b(medication|medicine|drug|prescription):\\s*([^,.]+)/gi,\n      CONDITION: /\\b(diagnosis|condition|disease):\\s*([^,.]+)/gi,\n      SYMPTOM: /\\b(symptom|complain):\\s*([^,.]+)/gi,\n    };\n    \n    messages.forEach(msg => {\n      Object.entries(patterns).forEach(([label, pattern]) => {\n        let match;\n        while ((match = pattern.exec(msg.content)) !== null) {\n          entities.push({\n            text: match[2].trim(),\n            label\n          });\n        }\n      });\n    });\n    \n    return entities;\n  }\n  \n  private static extractEntitiesFromMessage(content: string): Array<{text: string, label: string}> {\n    const entities: Array<{text: string, label: string}> = [];\n    \n    // Look for medical terms in the response\n    const medicalTerms = {\n      MEDICATION: ['medication', 'prescribed', 'dosage', 'mg', 'tablets'],\n      CONDITION: ['diagnosis', 'condition', 'syndrome', 'disease'],\n      PROCEDURE: ['surgery', 'procedure', 'test', 'examination'],\n      SYMPTOM: ['pain', 'fever', 'nausea', 'fatigue']\n    };\n    \n    Object.entries(medicalTerms).forEach(([label, terms]) => {\n      terms.forEach(term => {\n        if (content.toLowerCase().includes(term)) {\n          // Extract the sentence containing the term\n          const sentences = content.split(/[.!?]/);\n          sentences.forEach(sentence => {\n            if (sentence.toLowerCase().includes(term)) {\n              const extracted = sentence.trim().substring(0, 100);\n              if (extracted) {\n                entities.push({ text: extracted, label });\n              }\n            }\n          });\n        }\n      });\n    });\n    \n    return entities;\n  }\n  \n  private static async persistContext(sessionId: string, context: ConversationContext) {\n    // Update session with latest context metadata\n    await SessionsCollection.updateAsync(sessionId, {\n      $set: {\n        'metadata.patientId': context.patientContext,\n        'metadata.documentIds': context.documentContext,\n        'metadata.lastEntities': context.medicalEntities?.slice(-10),\n        lastMessage: context.recentMessages[context.recentMessages.length - 1]?.content.substring(0, 100),\n        messageCount: await MessagesCollection.countDocuments({ sessionId }),\n        updatedAt: new Date()\n      }\n    });\n  }\n  \n  static clearContext(sessionId: string) {\n    this.contexts.delete(sessionId);\n  }\n  \n  static clearAllContexts() {\n    this.contexts.clear();\n  }\n  \n  static getContextStats(sessionId: string): { size: number; messages: number; tokens: number } | null {\n    const context = this.contexts.get(sessionId);\n    if (!context) return null;\n    \n    return {\n      size: this.contexts.size,\n      messages: context.recentMessages.length,\n      tokens: context.totalTokens\n    };\n  }\n}","interface MCPRequest {\n  jsonrpc: '2.0';\n  method: string;\n  params: any;\n  id: string | number;\n}\n\ninterface MCPResponse {\n  jsonrpc: '2.0';\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n  };\n  id: string | number;\n}\n\nexport class AidboxServerConnection {\n  private baseUrl: string;\n  private sessionId: string | null = null;\n  private isInitialized = false;\n  private requestId = 1;\n\n  constructor(baseUrl: string = 'http://localhost:3002') {\n    this.baseUrl = baseUrl.replace(/\\/$/, ''); // Remove trailing slash\n  }\n\n  async connect(): Promise<void> {\n    try {\n      console.log(` Connecting to Aidbox MCP Server at: ${this.baseUrl}`);\n      \n      // Test if server is running\n      const healthCheck = await this.checkServerHealth();\n      if (!healthCheck.ok) {\n        throw new Error(`Aidbox MCP Server not responding at ${this.baseUrl}`);\n      }\n\n      // Initialize the connection\n      const initResult = await this.sendRequest('initialize', {\n        protocolVersion: '2024-11-05',\n        capabilities: {\n          roots: {\n            listChanged: false\n          }\n        },\n        clientInfo: {\n          name: 'meteor-aidbox-client',\n          version: '1.0.0'\n        }\n      });\n\n      console.log(' Aidbox MCP Initialize result:', initResult);\n\n      // Send initialized notification\n      await this.sendNotification('initialized', {});\n\n      // Test by listing tools\n      const toolsResult = await this.sendRequest('tools/list', {});\n      console.log(`Aidbox MCP Connection successful! Found ${toolsResult.tools?.length || 0} tools`);\n      \n      if (toolsResult.tools) {\n        console.log(' Available Aidbox tools:');\n        toolsResult.tools.forEach((tool: any, index: number) => {\n          console.log(`   ${index + 1}. ${tool.name} - ${tool.description}`);\n        });\n      }\n\n      this.isInitialized = true;\n      \n    } catch (error) {\n      console.error(' Failed to connect to Aidbox MCP Server:', error);\n      throw error;\n    }\n  }\n\n  private async checkServerHealth(): Promise<{ ok: boolean; error?: string }> {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: AbortSignal.timeout(5000) // 5 second timeout\n      });\n\n      if (response.ok) {\n        const health = await response.json();\n        console.log(' Aidbox MCP Server health check passed:', health);\n        return { ok: true };\n      } else {\n        return { ok: false, error: `Server returned ${response.status}` };\n      }\n    } catch (error: any) {\n      return { ok: false, error: error.message };\n    }\n  }\n\n  private async sendRequest(method: string, params: any): Promise<any> {\n    if (!this.baseUrl) {\n      throw new Error('Aidbox MCP Server not connected');\n    }\n\n    const id = this.requestId++;\n    const request: MCPRequest = {\n      jsonrpc: '2.0',\n      method,\n      params,\n      id\n    };\n\n    try {\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      };\n\n      // Add session ID if we have one\n      if (this.sessionId) {\n        headers['mcp-session-id'] = this.sessionId;\n      }\n\n      console.log(` Sending request to Aidbox: ${method}`, { id, sessionId: this.sessionId });\n\n      const response = await fetch(`${this.baseUrl}/mcp`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(request),\n        signal: AbortSignal.timeout(30000) // 30 second timeout\n      });\n\n      // Extract session ID from response headers if present\n      const responseSessionId = response.headers.get('mcp-session-id');\n      if (responseSessionId && !this.sessionId) {\n        this.sessionId = responseSessionId;\n        console.log(' Received Aidbox session ID:', this.sessionId);\n      }\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${response.statusText}. Response: ${errorText}`);\n      }\n\n      const result: MCPResponse = await response.json();\n\n      if (result.error) {\n        throw new Error(`Aidbox MCP error ${result.error.code}: ${result.error.message}`);\n      }\n\n      console.log(` Aidbox request ${method} successful`);\n      return result.result;\n      \n    } catch (error: any) {\n      console.error(` Aidbox request failed for method ${method}:`, error);\n      throw error;\n    }\n  }\n\n  private async sendNotification(method: string, params: any): Promise<void> {\n    const notification = {\n      jsonrpc: '2.0',\n      method,\n      params\n    };\n\n    try {\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n      };\n\n      if (this.sessionId) {\n        headers['mcp-session-id'] = this.sessionId;\n      }\n\n      await fetch(`${this.baseUrl}/mcp`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(notification),\n        signal: AbortSignal.timeout(10000)\n      });\n    } catch (error) {\n      console.warn(`Notification ${method} failed:`, error);\n    }\n  }\n\n  async listTools(): Promise<any> {\n    if (!this.isInitialized) {\n      throw new Error('Aidbox MCP Server not initialized');\n    }\n\n    return this.sendRequest('tools/list', {});\n  }\n\n  async callTool(name: string, args: any): Promise<any> {\n    if (!this.isInitialized) {\n      throw new Error('Aidbox MCP Server not initialized');\n    }\n\n    return this.sendRequest('tools/call', {\n      name,\n      arguments: args\n    });\n  }\n\n  disconnect() {\n    this.sessionId = null;\n    this.isInitialized = false;\n    console.log(' Disconnected from Aidbox MCP Server');\n  }\n}\n\n// Aidbox FHIR operations\nexport interface AidboxFHIROperations {\n  searchPatients(query: any): Promise<any>;\n  getPatientDetails(patientId: string): Promise<any>;\n  createPatient(patientData: any): Promise<any>;\n  updatePatient(patientId: string, updates: any): Promise<any>;\n  getPatientObservations(patientId: string, options?: any): Promise<any>;\n  createObservation(observationData: any): Promise<any>;\n  getPatientMedications(patientId: string, options?: any): Promise<any>;\n  createMedicationRequest(medicationData: any): Promise<any>;\n  getPatientConditions(patientId: string, options?: any): Promise<any>;\n  createCondition(conditionData: any): Promise<any>;\n  getPatientEncounters(patientId: string, options?: any): Promise<any>;\n  createEncounter(encounterData: any): Promise<any>;\n}\n\nexport function createAidboxOperations(connection: AidboxServerConnection): AidboxFHIROperations {\n  return {\n    async searchPatients(query: any) {\n      const result = await connection.callTool('aidboxSearchPatients', query);\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async getPatientDetails(patientId: string) {\n      const result = await connection.callTool('aidboxGetPatientDetails', { patientId });\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async createPatient(patientData: any) {\n      const result = await connection.callTool('aidboxCreatePatient', patientData);\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async updatePatient(patientId: string, updates: any) {\n      const result = await connection.callTool('aidboxUpdatePatient', { patientId, ...updates });\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async getPatientObservations(patientId: string, options: any = {}) {\n      const result = await connection.callTool('aidboxGetPatientObservations', { patientId, ...options });\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async createObservation(observationData: any) {\n      const result = await connection.callTool('aidboxCreateObservation', observationData);\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async getPatientMedications(patientId: string, options: any = {}) {\n      const result = await connection.callTool('aidboxGetPatientMedications', { patientId, ...options });\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async createMedicationRequest(medicationData: any) {\n      const result = await connection.callTool('aidboxCreateMedicationRequest', medicationData);\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async getPatientConditions(patientId: string, options: any = {}) {\n      const result = await connection.callTool('aidboxGetPatientConditions', { patientId, ...options });\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async createCondition(conditionData: any) {\n      const result = await connection.callTool('aidboxCreateCondition', conditionData);\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async getPatientEncounters(patientId: string, options: any = {}) {\n      const result = await connection.callTool('aidboxGetPatientEncounters', { patientId, ...options });\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    },\n\n    async createEncounter(encounterData: any) {\n      const result = await connection.callTool('aidboxCreateEncounter', encounterData);\n      return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n    }\n  };\n}","interface MCPRequest {\n    jsonrpc: '2.0';\n    method: string;\n    params: any;\n    id: string | number;\n  }\n  \n  interface MCPResponse {\n    jsonrpc: '2.0';\n    result?: any;\n    error?: {\n      code: number;\n      message: string;\n    };\n    id: string | number;\n  }\n  \n  export class EpicServerConnection {\n    private baseUrl: string;\n    private sessionId: string | null = null;\n    private isInitialized = false;\n    private requestId = 1;\n  \n    constructor(baseUrl: string = 'http://localhost:3003') {\n      this.baseUrl = baseUrl.replace(/\\/$/, ''); // Remove trailing slash\n    }\n  \n    async connect(): Promise<void> {\n      try {\n        console.log(`🏥 Connecting to Epic MCP Server at: ${this.baseUrl}`);\n        \n        // Test if server is running\n        const healthCheck = await this.checkServerHealth();\n        if (!healthCheck.ok) {\n          throw new Error(`Epic MCP Server not responding at ${this.baseUrl}: ${healthCheck.error}`);\n        }\n  \n        // Initialize the connection\n        const initResult = await this.sendRequest('initialize', {\n          protocolVersion: '2024-11-05',\n          capabilities: {\n            roots: {\n              listChanged: false\n            }\n          },\n          clientInfo: {\n            name: 'meteor-epic-client',\n            version: '1.0.0'\n          }\n        });\n  \n        console.log(' Epic MCP Initialize result:', initResult);\n  \n        // Send initialized notification\n        await this.sendNotification('initialized', {});\n  \n        // Test by listing tools\n        const toolsResult = await this.sendRequest('tools/list', {});\n        console.log(` Epic MCP Connection successful! Found ${toolsResult.tools?.length || 0} tools`);\n        \n        if (toolsResult.tools) {\n          console.log(' Available Epic tools:');\n          toolsResult.tools.forEach((tool: any, index: number) => {\n            console.log(`   ${index + 1}. ${tool.name} - ${tool.description}`);\n          });\n        }\n  \n        this.isInitialized = true;\n        \n      } catch (error) {\n        console.error(' Failed to connect to Epic MCP Server:', error);\n        throw error;\n      }\n    }\n  \n    private async checkServerHealth(): Promise<{ ok: boolean; error?: string }> {\n      try {\n        const response = await fetch(`${this.baseUrl}/health`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          signal: AbortSignal.timeout(5000) // 5 second timeout\n        });\n  \n        if (response.ok) {\n          const health = await response.json();\n          console.log('Epic MCP Server health check passed:', health);\n          return { ok: true };\n        } else {\n          return { ok: false, error: `Server returned ${response.status}` };\n        }\n      } catch (error: any) {\n        return { ok: false, error: error.message };\n      }\n    }\n  \n    private async sendRequest(method: string, params: any): Promise<any> {\n      if (!this.baseUrl) {\n        throw new Error('Epic MCP Server not connected');\n      }\n  \n      const id = this.requestId++;\n      const request: MCPRequest = {\n        jsonrpc: '2.0',\n        method,\n        params,\n        id\n      };\n  \n      try {\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        };\n  \n        if (this.sessionId) {\n          headers['mcp-session-id'] = this.sessionId;\n        }\n  \n        console.log(` Sending request to Epic MCP: ${method}`, { id, sessionId: this.sessionId });\n  \n        const response = await fetch(`${this.baseUrl}/mcp`, {\n          method: 'POST',\n          headers,\n          body: JSON.stringify(request),\n          signal: AbortSignal.timeout(30000) // 30 second timeout\n        });\n  \n        const responseSessionId = response.headers.get('mcp-session-id');\n        if (responseSessionId && !this.sessionId) {\n          this.sessionId = responseSessionId;\n          console.log(' Received Epic session ID:', this.sessionId);\n        }\n  \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`HTTP ${response.status}: ${response.statusText}. Response: ${errorText}`);\n        }\n  \n        const result: MCPResponse = await response.json();\n  \n        if (result.error) {\n          throw new Error(`Epic MCP error ${result.error.code}: ${result.error.message}`);\n        }\n  \n        console.log(` Epic request ${method} successful`);\n        return result.result;\n        \n      } catch (error: any) {\n        console.error(` Epic request failed for method ${method}:`, error);\n        throw error;\n      }\n    }\n  \n    private async sendNotification(method: string, params: any): Promise<void> {\n      const notification = {\n        jsonrpc: '2.0',\n        method,\n        params\n      };\n  \n      try {\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n        };\n  \n        if (this.sessionId) {\n          headers['mcp-session-id'] = this.sessionId;\n        }\n  \n        await fetch(`${this.baseUrl}/mcp`, {\n          method: 'POST',\n          headers,\n          body: JSON.stringify(notification),\n          signal: AbortSignal.timeout(10000)\n        });\n      } catch (error) {\n        console.warn(`Epic notification ${method} failed:`, error);\n      }\n    }\n  \n    async listTools(): Promise<any> {\n      if (!this.isInitialized) {\n        throw new Error('Epic MCP Server not initialized');\n      }\n  \n      return this.sendRequest('tools/list', {});\n    }\n  \n    async callTool(name: string, args: any): Promise<any> {\n      if (!this.isInitialized) {\n        throw new Error('Epic MCP Server not initialized');\n      }\n  \n      return this.sendRequest('tools/call', {\n        name,\n        arguments: args\n      });\n    }\n  \n    disconnect() {\n      this.sessionId = null;\n      this.isInitialized = false;\n      console.log(' Disconnected from Epic MCP Server');\n    }\n  }\n  \n  // Epic FHIR operations interface\n  export interface EpicFHIROperations {\n    searchPatients(query: any): Promise<any>;\n    getPatientDetails(patientId: string): Promise<any>;\n    getPatientObservations(patientId: string, options?: any): Promise<any>;\n    getPatientMedications(patientId: string, options?: any): Promise<any>;\n    getPatientConditions(patientId: string, options?: any): Promise<any>;\n    getPatientEncounters(patientId: string, options?: any): Promise<any>;\n  }\n  \n  export function createEpicOperations(connection: EpicServerConnection): EpicFHIROperations {\n    return {\n      async searchPatients(query: any) {\n        const result = await connection.callTool('searchPatients', query);\n        return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n      },\n  \n      async getPatientDetails(patientId: string) {\n        const result = await connection.callTool('getPatientDetails', { patientId });\n        return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n      },\n  \n      async getPatientObservations(patientId: string, options: any = {}) {\n        const result = await connection.callTool('getPatientObservations', { patientId, ...options });\n        return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n      },\n  \n      async getPatientMedications(patientId: string, options: any = {}) {\n        const result = await connection.callTool('getPatientMedications', { patientId, ...options });\n        return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n      },\n  \n      async getPatientConditions(patientId: string, options: any = {}) {\n        const result = await connection.callTool('getPatientConditions', { patientId, ...options });\n        return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n      },\n  \n      async getPatientEncounters(patientId: string, options: any = {}) {\n        const result = await connection.callTool('getPatientEncounters', { patientId, ...options });\n        return result.content?.[0]?.text ? JSON.parse(result.content[0].text) : result;\n      }\n    };\n  }","import Anthropic from '@anthropic-ai/sdk';\nimport { MedicalServerConnection, MedicalDocumentOperations, createMedicalOperations } from './medicalServerConnection';\nimport { AidboxServerConnection, AidboxFHIROperations, createAidboxOperations } from './aidboxServerConnection';\nimport { EpicServerConnection, EpicFHIROperations, createEpicOperations } from './epicServerConnection';\n\nexport interface MCPClientConfig {\n  provider: 'anthropic' | 'ozwell';\n  apiKey: string;\n  ozwellEndpoint?: string;\n}\n\nexport class MCPClientManager {\n  private anthropic?: Anthropic;\n  private isInitialized = false;\n  private config?: MCPClientConfig;\n  \n  // Medical MCP connection (Streamable HTTP)\n  private medicalConnection?: MedicalServerConnection;\n  private medicalOperations?: MedicalDocumentOperations;\n  private availableTools: any[] = [];\n\n  // Aidbox MCP connection\n  private aidboxConnection?: AidboxServerConnection;\n  private aidboxOperations?: AidboxFHIROperations;\n  private aidboxTools: any[] = [];\n\n  // Epic MCP connection\n  private epicConnection?: EpicServerConnection;\n  private epicOperations?: EpicFHIROperations;\n  private epicTools: any[] = [];\n\n  private constructor() {}\n\n  public static getInstance(): MCPClientManager {\n    if (!MCPClientManager.instance) {\n      MCPClientManager.instance = new MCPClientManager();\n    }\n    return MCPClientManager.instance;\n  }\n\n  public async initialize(config: MCPClientConfig): Promise<void> {\n    console.log(' Initializing MCP Client with Intelligent Tool Selection');\n    this.config = config;\n\n    try {\n      if (config.provider === 'anthropic') {\n        console.log('Creating Anthropic client with native tool calling support...');\n        this.anthropic = new Anthropic({\n          apiKey: config.apiKey,\n        });\n        console.log(' Anthropic client initialized with intelligent tool selection');\n      }\n\n      this.isInitialized = true;\n      console.log(`MCP Client ready with provider: ${config.provider}`);\n    } catch (error) {\n      console.error(' Failed to initialize MCP client:', error);\n      throw error;\n    }\n  }\n\n  // Connect to medical MCP server and get all available tools\n  public async connectToMedicalServer(): Promise<void> {\n    try {\n      const settings = (global as any).Meteor?.settings?.private;\n      const mcpServerUrl = settings?.MEDICAL_MCP_SERVER_URL || \n                           process.env.MEDICAL_MCP_SERVER_URL || \n                           'http://localhost:3005';\n      \n      console.log(` Connecting to Medical MCP Server at: ${mcpServerUrl}`);\n      \n      this.medicalConnection = new MedicalServerConnection(mcpServerUrl);\n      await this.medicalConnection.connect();\n      this.medicalOperations = createMedicalOperations(this.medicalConnection);\n      \n      // Get all available tools\n      const toolsResult = await this.medicalConnection.listTools();\n      this.availableTools = toolsResult.tools || [];\n      \n      console.log(` Connected with ${this.availableTools.length} medical tools available`);\n      console.log(` Medical tool names: ${this.availableTools.map(t => t.name).join(', ')}`);\n      \n    } catch (error) {\n      console.error(' Medical MCP Server HTTP connection failed:', error);\n      throw error;\n    }\n  }\n\n  public async connectToAidboxServer(): Promise<void> {\n    try {\n      const settings = (global as any).Meteor?.settings?.private;\n      const aidboxServerUrl = settings?.AIDBOX_MCP_SERVER_URL || \n                             process.env.AIDBOX_MCP_SERVER_URL || \n                             'http://localhost:3002';\n      \n      console.log(` Connecting to Aidbox MCP Server at: ${aidboxServerUrl}`);\n      \n      this.aidboxConnection = new AidboxServerConnection(aidboxServerUrl);\n      await this.aidboxConnection.connect();\n      this.aidboxOperations = createAidboxOperations(this.aidboxConnection);\n      \n      // Get Aidbox tools\n      const toolsResult = await this.aidboxConnection.listTools();\n      this.aidboxTools = toolsResult.tools || [];\n      \n      console.log(` Connected to Aidbox with ${this.aidboxTools.length} tools available`);\n      console.log(` Aidbox tool names: ${this.aidboxTools.map(t => t.name).join(', ')}`);\n      \n      // Merge with existing tools, ensuring unique names\n      this.availableTools = this.mergeToolsUnique(this.availableTools, this.aidboxTools);\n      \n      this.logAvailableTools();\n      \n    } catch (error) {\n      console.error(' Aidbox MCP Server connection failed:', error);\n      throw error;\n    }\n  }\n\n  public async connectToEpicServer(): Promise<void> {\n    try {\n      const settings = (global as any).Meteor?.settings?.private;\n      const epicServerUrl = settings?.EPIC_MCP_SERVER_URL || \n                           process.env.EPIC_MCP_SERVER_URL || \n                           'http://localhost:3003';\n      \n      console.log(` Connecting to Epic MCP Server at: ${epicServerUrl}`);\n      \n      this.epicConnection = new EpicServerConnection(epicServerUrl);\n      await this.epicConnection.connect();\n      this.epicOperations = createEpicOperations(this.epicConnection);\n      \n      // Get Epic tools\n      const toolsResult = await this.epicConnection.listTools();\n      this.epicTools = toolsResult.tools || [];\n      \n      console.log(` Connected to Epic with ${this.epicTools.length} tools available`);\n      console.log(` Epic tool names: ${this.epicTools.map(t => t.name).join(', ')}`);\n      \n      // Merge with existing tools, ensuring unique names\n      this.availableTools = this.mergeToolsUnique(this.availableTools, this.epicTools);\n      \n      this.logAvailableTools();\n      \n    } catch (error) {\n      console.error(' Epic MCP Server connection failed:', error);\n      throw error;\n    }\n  }\n\n  // Merge tools ensuring unique names\n  private mergeToolsUnique(existingTools: any[], newTools: any[]): any[] {\n    console.log(`🔧 Merging tools: ${existingTools.length} existing + ${newTools.length} new`);\n    \n    const toolNameSet = new Set(existingTools.map(tool => tool.name));\n    const uniqueNewTools = newTools.filter(tool => {\n      if (toolNameSet.has(tool.name)) {\n        console.warn(` Duplicate tool name found: ${tool.name} - skipping duplicate`);\n        return false;\n      }\n      toolNameSet.add(tool.name);\n      return true;\n    });\n    \n    const mergedTools = [...existingTools, ...uniqueNewTools];\n    console.log(` Merged tools: ${existingTools.length} existing + ${uniqueNewTools.length} new = ${mergedTools.length} total`);\n    \n    return mergedTools;\n  }\n\nprivate logAvailableTools(): void {\n  console.log('\\n Available Tools for Intelligent Selection:');\n  \n  // Separate tools by actual source/type, not by pattern matching\n  const epicTools = this.availableTools.filter(t => \n    t.name.toLowerCase().startsWith('epic')\n  );\n  \n  const aidboxTools = this.availableTools.filter(t => \n    this.isAidboxFHIRTool(t) && !t.name.toLowerCase().startsWith('epic')\n  );\n  \n  const documentTools = this.availableTools.filter(t => \n    this.isDocumentTool(t)\n  );\n  \n  const analysisTools = this.availableTools.filter(t => \n    this.isAnalysisTool(t)\n  );\n  \n  const otherTools = this.availableTools.filter(t => \n    !epicTools.includes(t) && \n    !aidboxTools.includes(t) && \n    !documentTools.includes(t) && \n    !analysisTools.includes(t)\n  );\n  \n  if (aidboxTools.length > 0) {\n    console.log(' Aidbox FHIR Tools:');\n    aidboxTools.forEach(tool => console.log(`   • ${tool.name} - ${tool.description?.substring(0, 60)}...`));\n  }\n  \n  if (epicTools.length > 0) {\n    console.log(' Epic EHR Tools:');\n    epicTools.forEach(tool => console.log(`   • ${tool.name} - ${tool.description?.substring(0, 60)}...`));\n  }\n  \n  if (documentTools.length > 0) {\n    console.log(' Document Tools:');\n    documentTools.forEach(tool => console.log(`   • ${tool.name} - ${tool.description?.substring(0, 60)}...`));\n  }\n  \n  if (analysisTools.length > 0) {\n    console.log(' Search & Analysis Tools:');\n    analysisTools.forEach(tool => console.log(`   • ${tool.name} - ${tool.description?.substring(0, 60)}...`));\n  }\n  \n  if (otherTools.length > 0) {\n    console.log(' Other Tools:');\n    otherTools.forEach(tool => console.log(`   • ${tool.name} - ${tool.description?.substring(0, 60)}...`));\n  }\n  \n  console.log(`\\n Claude will intelligently select from ${this.availableTools.length} total tools based on user queries`);\n  \n  // Debug: Check for duplicates\n  this.debugToolDuplicates();\n}\n\n// Add these helper methods to MCPClientManager class\nprivate isAidboxFHIRTool(tool: any): boolean {\n  const aidboxFHIRToolNames = [\n    'searchPatients', 'getPatientDetails', 'createPatient', 'updatePatient',\n    'getPatientObservations', 'createObservation',\n    'getPatientMedications', 'createMedicationRequest',\n    'getPatientConditions', 'createCondition',\n    'getPatientEncounters', 'createEncounter'\n  ];\n  \n  return aidboxFHIRToolNames.includes(tool.name);\n}\n\nprivate isDocumentTool(tool: any): boolean {\n  const documentToolNames = [\n    'uploadDocument', 'searchDocuments', 'listDocuments',\n    'chunkAndEmbedDocument', 'generateEmbeddingLocal'\n  ];\n  \n  return documentToolNames.includes(tool.name);\n}\n\nprivate isAnalysisTool(tool: any): boolean {\n  const analysisToolNames = [\n    'analyzePatientHistory', 'findSimilarCases', 'getMedicalInsights',\n    'extractMedicalEntities', 'semanticSearchLocal'\n  ];\n  \n  return analysisToolNames.includes(tool.name);\n}\n\n  // Debug method to identify duplicate tools\n  private debugToolDuplicates(): void {\n    const toolNames = this.availableTools.map(t => t.name);\n    const nameCount = new Map<string, number>();\n    \n    toolNames.forEach(name => {\n      nameCount.set(name, (nameCount.get(name) || 0) + 1);\n    });\n    \n    const duplicates = Array.from(nameCount.entries())\n      .filter(([name, count]) => count > 1);\n    \n    if (duplicates.length > 0) {\n      console.error(' DUPLICATE TOOL NAMES FOUND:');\n      duplicates.forEach(([name, count]) => {\n        console.error(`  • ${name}: appears ${count} times`);\n      });\n    } else {\n      console.log('✅ All tool names are unique');\n    }\n  }\n\n  // Filter tools based on user's specified data source\n  private filterToolsByDataSource(tools: any[], dataSource: string): any[] {\n    if (dataSource.toLowerCase().includes('mongodb') || dataSource.toLowerCase().includes('atlas')) {\n      // User wants MongoDB/Atlas - return only document tools\n      return tools.filter(tool => \n        tool.name.includes('Document') || \n        tool.name.includes('search') || \n        tool.name.includes('upload') || \n        tool.name.includes('extract') || \n        tool.name.includes('Medical') ||\n        tool.name.includes('Similar') ||\n        tool.name.includes('Insight') ||\n        (tool.name.includes('search') && !tool.name.includes('Patient'))\n      );\n    }\n    \n    if (dataSource.toLowerCase().includes('aidbox') || dataSource.toLowerCase().includes('fhir')) {\n      // User wants Aidbox - return only FHIR tools\n      return tools.filter(tool => \n        (tool.name.includes('Patient') || \n         tool.name.includes('Observation') || \n         tool.name.includes('Medication') || \n         tool.name.includes('Condition') || \n         tool.name.includes('Encounter') ||\n         tool.name === 'searchPatients') &&\n        !tool.description?.toLowerCase().includes('epic')\n      );\n    }\n    \n    if (dataSource.toLowerCase().includes('epic') || dataSource.toLowerCase().includes('ehr')) {\n      // User wants Epic - return only Epic tools\n      return tools.filter(tool => \n        tool.description?.toLowerCase().includes('epic') ||\n        tool.name.includes('getPatientDetails') ||\n        tool.name.includes('getPatientObservations') ||\n        tool.name.includes('getPatientMedications') ||\n        tool.name.includes('getPatientConditions') ||\n        tool.name.includes('getPatientEncounters') ||\n        (tool.name === 'searchPatients' && tool.description?.toLowerCase().includes('epic'))\n      );\n    }\n    \n    // No specific preference, return all tools\n    return tools;\n  }\n\n  // Analyze query to understand user's intent about data sources\n  private analyzeQueryIntent(query: string): { dataSource?: string; intent?: string } {\n    const lowerQuery = query.toLowerCase();\n    \n    // Check for explicit data source mentions\n    if (lowerQuery.includes('epic') || lowerQuery.includes('ehr')) {\n      return {\n        dataSource: 'Epic EHR',\n        intent: 'Search Epic EHR patient data'\n      };\n    }\n    \n    if (lowerQuery.includes('mongodb') || lowerQuery.includes('atlas')) {\n      return {\n        dataSource: 'MongoDB Atlas',\n        intent: 'Search uploaded documents and medical records'\n      };\n    }\n    \n    if (lowerQuery.includes('aidbox') || lowerQuery.includes('fhir')) {\n      return {\n        dataSource: 'Aidbox FHIR',\n        intent: 'Search structured patient data'\n      };\n    }\n    \n    // Check for document-related terms\n    if (lowerQuery.includes('document') || lowerQuery.includes('upload') || lowerQuery.includes('file')) {\n      return {\n        dataSource: 'MongoDB Atlas (documents)',\n        intent: 'Work with uploaded medical documents'\n      };\n    }\n    \n    // Check for patient search patterns\n    if (lowerQuery.includes('search for patient') || lowerQuery.includes('find patient')) {\n      // Default to Epic for patient searches unless specified\n      return {\n        dataSource: 'Epic EHR',\n        intent: 'Search for patient information'\n      };\n    }\n    \n    return {};\n  }\n\n  // Convert tools to Anthropic format with strict deduplication\n  private getAnthropicTools(): any[] {\n    // Use Map to ensure uniqueness by tool name\n    const uniqueTools = new Map<string, any>();\n    \n    this.availableTools.forEach(tool => {\n      if (!uniqueTools.has(tool.name)) {\n        uniqueTools.set(tool.name, {\n          name: tool.name,\n          description: tool.description,\n          input_schema: {\n            type: \"object\",\n            properties: tool.inputSchema?.properties || {},\n            required: tool.inputSchema?.required || []\n          }\n        });\n      } else {\n        console.warn(` Skipping duplicate tool in Anthropic format: ${tool.name}`);\n      }\n    });\n    \n    const toolsArray = Array.from(uniqueTools.values());\n    console.log(` Prepared ${toolsArray.length} unique tools for Anthropic (from ${this.availableTools.length} total)`);\n    \n    return toolsArray;\n  }\n\n  // Validate tools before sending to Anthropic (additional safety check)\n  private validateToolsForAnthropic(): any[] {\n    const tools = this.getAnthropicTools();\n    \n    // Final check for duplicates\n    const nameSet = new Set<string>();\n    const validTools: any[] = [];\n    \n    tools.forEach(tool => {\n      if (!nameSet.has(tool.name)) {\n        nameSet.add(tool.name);\n        validTools.push(tool);\n      } else {\n        console.error(` CRITICAL: Duplicate tool found in final validation: ${tool.name}`);\n      }\n    });\n    \n    if (validTools.length !== tools.length) {\n      console.warn(`🧹 Removed ${tools.length - validTools.length} duplicate tools in final validation`);\n    }\n    \n    console.log(` Final validation: ${validTools.length} unique tools ready for Anthropic`);\n    return validTools;\n  }\n\n\npublic async callMCPTool(toolName: string, args: any): Promise<any> {\n  console.log(`🔧 Routing tool: ${toolName} with args:`, JSON.stringify(args, null, 2));\n  \n  // Epic tools - MUST go to Epic MCP Server (port 3003)\n  const epicToolNames = [\n    'epicSearchPatients', \n    'epicGetPatientDetails',\n    'epicGetPatientObservations', \n    'epicGetPatientMedications', \n    'epicGetPatientConditions', \n    'epicGetPatientEncounters'\n  ];\n\n  if (epicToolNames.includes(toolName)) {\n    if (!this.epicConnection) {\n      throw new Error('Epic MCP Server not connected - cannot call Epic tools');\n    }\n    \n    console.log(` Routing ${toolName} to Epic MCP Server (port 3003)`);\n    try {\n      const result = await this.epicConnection.callTool(toolName, args);\n      console.log(` Epic tool ${toolName} completed successfully`);\n      return result;\n    } catch (error) {\n      console.error(` Epic tool ${toolName} failed:`, error);\n      throw new Error(`Epic tool ${toolName} failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Aidbox tools - MUST go to Aidbox MCP Server (port 3002)\n  const aidboxToolNames = [\n    'aidboxSearchPatients', 'aidboxGetPatientDetails', 'aidboxCreatePatient', 'aidboxUpdatePatient',\n    'aidboxGetPatientObservations', 'aidboxCreateObservation',\n    'aidboxGetPatientMedications', 'aidboxCreateMedicationRequest',\n    'aidboxGetPatientConditions', 'aidboxCreateCondition',\n    'aidboxGetPatientEncounters', 'aidboxCreateEncounter'\n  ];\n\n  if (aidboxToolNames.includes(toolName)) {\n    if (!this.aidboxConnection) {\n      throw new Error('Aidbox MCP Server not connected - cannot call Aidbox tools');\n    }\n    \n    console.log(` Routing ${toolName} to Aidbox MCP Server (port 3002)`);\n    try {\n      const result = await this.aidboxConnection.callTool(toolName, args);\n      console.log(` Aidbox tool ${toolName} completed successfully`);\n      return result;\n    } catch (error) {\n      console.error(` Aidbox tool ${toolName} failed:`, error);\n      throw new Error(`Aidbox tool ${toolName} failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  const medicalToolNames = [\n    // Document tools\n    'uploadDocument', 'searchDocuments', 'listDocuments',\n    'generateEmbeddingLocal', 'chunkAndEmbedDocument',\n    \n    // Analysis tools\n    'extractMedicalEntities', 'findSimilarCases', 'analyzePatientHistory',\n    'getMedicalInsights', 'semanticSearchLocal',\n    \n    // Legacy tools\n    'upload_document', 'extract_text', 'extract_medical_entities',\n    'search_by_diagnosis', 'semantic_search', 'get_patient_summary'\n  ];\n\n  if (medicalToolNames.includes(toolName)) {\n    if (!this.medicalConnection) {\n      throw new Error('Medical MCP Server not connected - cannot call medical/document tools');\n    }\n    \n    console.log(` Routing ${toolName} to Medical MCP Server (port 3001)`);\n    try {\n      const result = await this.medicalConnection.callTool(toolName, args);\n      console.log(` Medical tool ${toolName} completed successfully`);\n      return result;\n    } catch (error) {\n      console.error(` Medical tool ${toolName} failed:`, error);\n      throw new Error(`Medical tool ${toolName} failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // Unknown tool - check if it exists in available tools\n  const availableTool = this.availableTools.find(t => t.name === toolName);\n  if (!availableTool) {\n    const availableToolNames = this.availableTools.map(t => t.name).join(', ');\n    throw new Error(`Tool '${toolName}' is not available. Available tools: ${availableToolNames}`);\n  }\n\n  console.warn(` Unknown tool routing for: ${toolName}. Defaulting to Medical server.`);\n  \n  if (!this.medicalConnection) {\n    throw new Error('Medical MCP Server not connected');\n  }\n  \n  try {\n    const result = await this.medicalConnection.callTool(toolName, args);\n    console.log(` Tool ${toolName} completed successfully (default routing)`);\n    return result;\n  } catch (error) {\n    console.error(` Tool ${toolName} failed on default routing:`, error);\n    throw new Error(`Tool ${toolName} failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n  // Convenience method for Epic tool calls\n  public async callEpicTool(toolName: string, args: any): Promise<any> {\n    if (!this.epicConnection) {\n      throw new Error('Epic MCP Server not connected');\n    }\n\n    try {\n      console.log(` Calling Epic tool: ${toolName}`, args);\n      const result = await this.epicConnection.callTool(toolName, args);\n      console.log(` Epic tool ${toolName} completed successfully`);\n      return result;\n    } catch (error) {\n      console.error(` Epic tool ${toolName} failed:`, error);\n      throw error;\n    }\n  }\n\n  // Health check for all servers\n  public async healthCheck(): Promise<{ epic: boolean; aidbox: boolean; medical: boolean }> {\n    const health = {\n      epic: false,\n      aidbox: false,\n      medical: false\n    };\n\n    // Check Epic server\n    if (this.epicConnection) {\n      try {\n        const epicHealth = await fetch('http://localhost:3003/health');\n        health.epic = epicHealth.ok;\n      } catch (error) {\n        console.warn('Epic health check failed:', error);\n      }\n    }\n\n    // Check Aidbox server\n    if (this.aidboxConnection) {\n      try {\n        const aidboxHealth = await fetch('http://localhost:3002/health');\n        health.aidbox = aidboxHealth.ok;\n      } catch (error) {\n        console.warn('Aidbox health check failed:', error);\n      }\n    }\n\n    // Check Medical server\n    if (this.medicalConnection) {\n      try {\n        const medicalHealth = await fetch('http://localhost:3005/health');\n        health.medical = medicalHealth.ok;\n      } catch (error) {\n        console.warn('Medical health check failed:', error);\n      }\n    }\n\n    return health;\n  }\n\n  // Main intelligent query processing method\n  public async processQueryWithIntelligentToolSelection(\n    query: string,\n    context?: { documentId?: string; patientId?: string; sessionId?: string }\n  ): Promise<string> {\n    if (!this.isInitialized || !this.config) {\n      throw new Error('MCP Client not initialized');\n    }\n\n    console.log(` Processing query with intelligent tool selection: \"${query}\"`);\n\n    try {\n      if (this.config.provider === 'anthropic' && this.anthropic) {\n        return await this.processWithAnthropicIntelligent(query, context);\n      } else if (this.config.provider === 'ozwell') {\n        return await this.processWithOzwellIntelligent(query, context);\n      }\n      \n      throw new Error('No LLM provider configured');\n    } catch (error: any) {\n      console.error('Error processing query with intelligent tool selection:', error);\n      \n      // Handle specific error types\n      if (error.status === 529 || error.message?.includes('Overloaded')) {\n        return 'I\\'m experiencing high demand right now. Please try your query again in a moment. The system should respond normally after a brief wait.';\n      }\n      \n      if (error.message?.includes('not connected')) {\n        return 'I\\'m having trouble connecting to the medical data systems. Please ensure the MCP servers are running and try again.';\n      }\n      \n      if (error.message?.includes('API')) {\n        return 'I encountered an API error while processing your request. Please try again in a moment.';\n      }\n      \n      // For development/debugging\n      if (process.env.NODE_ENV === 'development') {\n        return `Error: ${error.message}`;\n      }\n      \n      return 'I encountered an error while processing your request. Please try rephrasing your question or try again in a moment.';\n    }\n  }\n\n  // Anthropic native tool calling with iterative support\n  private async processWithAnthropicIntelligent(\n    query: string, \n    context?: any\n  ): Promise<string> {\n    // Use validated tools to prevent duplicate errors\n    let tools = this.validateToolsForAnthropic();\n    \n    // Analyze query to understand data source intent\n    const queryIntent = this.analyzeQueryIntent(query);\n    \n    // Filter tools based on user's explicit data source preference\n    if (queryIntent.dataSource) {\n      tools = this.filterToolsByDataSource(tools, queryIntent.dataSource);\n      console.log(`🎯 Filtered to ${tools.length} tools based on data source: ${queryIntent.dataSource}`);\n      console.log(`🔧 Available tools after filtering: ${tools.map(t => t.name).join(', ')}`);\n    }\n    \n    // Build context information\n    let contextInfo = '';\n    if (context?.patientId) {\n      contextInfo += `\\nCurrent patient context: ${context.patientId}`;\n    }\n    if (context?.sessionId) {\n      contextInfo += `\\nSession context available`;\n    }\n    \n    // Add query intent to context\n    if (queryIntent.dataSource) {\n      contextInfo += `\\nUser specified data source: ${queryIntent.dataSource}`;\n    }\n    if (queryIntent.intent) {\n      contextInfo += `\\nQuery intent: ${queryIntent.intent}`;\n    }\n\n    const systemPrompt = `You are a medical AI assistant with access to multiple healthcare data systems:\n\n🏥 **Epic EHR Tools** - For Epic EHR patient data, observations, medications, conditions, encounters\n🏥 **Aidbox FHIR Tools** - For FHIR-compliant patient data, observations, medications, conditions, encounters  \n📄 **Medical Document Tools** - For document upload, search, and medical entity extraction (MongoDB Atlas)\n🔍 **Semantic Search** - For finding similar cases and medical insights (MongoDB Atlas)\n\n**CRITICAL: Pay attention to which data source the user mentions:**\n\n- If user mentions \"Epic\" or \"EHR\" → Use Epic EHR tools\n- If user mentions \"Aidbox\" or \"FHIR\" → Use Aidbox FHIR tools\n- If user mentions \"MongoDB\", \"Atlas\", \"documents\", \"uploaded files\" → Use document search tools\n- If user mentions \"diagnosis in MongoDB\" → Search documents, NOT Epic/Aidbox\n- If no specific source mentioned → Choose based on context (Epic for patient searches, Aidbox for FHIR, documents for uploads)\n\n**Available Context:**${contextInfo}\n\n**Instructions:**\n1. **LISTEN TO USER'S DATA SOURCE PREFERENCE** - If they say Epic, use Epic tools; if MongoDB/Atlas, use document tools\n2. For Epic/Aidbox queries, use patient search first to get IDs, then specific data tools\n3. For document queries, use search and upload tools\n4. Provide clear, helpful medical information\n5. Always explain what data sources you're using\n\nBe intelligent about tool selection AND respect the user's specified data source.`;\n\n    let conversationHistory: any[] = [{ role: 'user', content: query }];\n    let finalResponse = '';\n    let iterations = 0;\n    const maxIterations = 7; // Reduced to avoid API overload\n    const maxRetries = 3;\n\n    while (iterations < maxIterations) {\n      console.log(` Iteration ${iterations + 1} - Asking Claude to decide on tools`);\n      console.log(`🔧 Using ${tools.length} validated tools`);\n      \n      let retryCount = 0;\n      let response;\n      \n      // Add retry logic for API overload\n      while (retryCount < maxRetries) {\n        try {\n          response = await this.anthropic!.messages.create({\n            model: 'claude-3-5-sonnet-20241022',\n            max_tokens: 1000, // Reduced to avoid overload\n            system: systemPrompt,\n            messages: conversationHistory,\n            tools: tools,\n            tool_choice: { type: 'auto' }\n          });\n          break; // Success, exit retry loop\n        } catch (error: any) {\n          if (error.status === 529 && retryCount < maxRetries - 1) {\n            retryCount++;\n            const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff\n            console.warn(` Anthropic API overloaded, retrying in ${delay}ms (attempt ${retryCount}/${maxRetries})`);\n            await new Promise(resolve => setTimeout(resolve, delay));\n          } else {\n            throw error; // Re-throw if not retryable or max retries reached\n          }\n        }\n      }\n      \n      if (!response) {\n        throw new Error('Failed to get response from Anthropic after retries');\n      }\n\n      let hasToolUse = false;\n      let assistantResponse: any[] = [];\n      \n      for (const content of response.content) {\n        assistantResponse.push(content);\n        \n        if (content.type === 'text') {\n          finalResponse += content.text;\n          console.log(` Claude says: ${content.text.substring(0, 100)}...`);\n        } else if (content.type === 'tool_use') {\n          hasToolUse = true;\n          console.log(`🔧 Claude chose tool: ${content.name} with args:`, content.input);\n          \n          try {\n            const toolResult = await this.callMCPTool(content.name, content.input);\n            console.log(` Tool ${content.name} executed successfully`);\n            \n            // Add tool result to conversation\n            conversationHistory.push(\n              { role: 'assistant', content: assistantResponse }\n            );\n            \n            conversationHistory.push({\n              role: 'user',\n              content: [{\n                type: 'tool_result',\n                tool_use_id: content.id,\n                content: this.formatToolResult(toolResult)\n              }]\n            });\n            \n          } catch (error) {\n            console.error(` Tool ${content.name} failed:`, error);\n            \n            conversationHistory.push(\n              { role: 'assistant', content: assistantResponse }\n            );\n            \n            conversationHistory.push({\n              role: 'user',\n              content: [{\n                type: 'tool_result',\n                tool_use_id: content.id,\n                content: `Error executing tool: ${error.message}`,\n                is_error: true\n              }]\n            });\n          }\n          \n          finalResponse = '';\n          break; // Process one tool at a time\n        }\n      }\n\n      if (!hasToolUse) {\n        // Claude didn't use any tools, so it's providing a final answer\n        console.log(' Claude provided final answer without additional tools');\n        break;\n      }\n\n      iterations++;\n    }\n\n    if (iterations >= maxIterations) {\n      finalResponse += '\\n\\n*Note: Reached maximum tool iterations. Response may be incomplete.*';\n    }\n\n    return finalResponse || 'I was unable to process your request completely.';\n  }\n\n  // Format tool results for Claude\n  private formatToolResult(result: any): string {\n    try {\n      // Handle different result formats\n      if (result?.content?.[0]?.text) {\n        return result.content[0].text;\n      }\n      \n      if (typeof result === 'string') {\n        return result;\n      }\n      \n      return JSON.stringify(result, null, 2);\n    } catch (error) {\n      return `Tool result formatting error: ${error.message}`;\n    }\n  }\n\n  // Ozwell implementation with intelligent prompting\n  private async processWithOzwellIntelligent(\n    query: string, \n    context?: any\n  ): Promise<string> {\n    const endpoint = this.config?.ozwellEndpoint || 'https://ai.bluehive.com/api/v1/completion';\n    \n    const availableToolsDescription = this.availableTools.map(tool => \n      `${tool.name}: ${tool.description}`\n    ).join('\\n');\n    \n    const systemPrompt = `You are a medical AI assistant with access to these tools:\n\n${availableToolsDescription}\n\nThe user's query is: \"${query}\"\n\nBased on this query, determine what tools (if any) you need to use and provide a helpful response. If you need to use tools, explain what you would do, but note that in this mode you cannot actually execute tools.`;\n    \n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config?.apiKey}`,\n        },\n        body: JSON.stringify({\n          prompt: systemPrompt,\n          max_tokens: 1000,\n          temperature: 0.7,\n          stream: false,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Ozwell API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      return data.choices?.[0]?.text || data.completion || data.response || 'No response generated';\n    } catch (error) {\n      console.error('Ozwell API error:', error);\n      throw new Error(`Failed to get response from Ozwell: ${error}`);\n    }\n  }\n\n  // Backward compatibility methods\n  public async processQueryWithMedicalContext(\n    query: string,\n    context?: { documentId?: string; patientId?: string; sessionId?: string }\n  ): Promise<string> {\n    // Route to intelligent tool selection\n    return this.processQueryWithIntelligentToolSelection(query, context);\n  }\n\n  // Utility methods\n  public getAvailableTools(): any[] {\n    return this.availableTools;\n  }\n\n  public isToolAvailable(toolName: string): boolean {\n    return this.availableTools.some(tool => tool.name === toolName);\n  }\n\n  public getMedicalOperations(): MedicalDocumentOperations {\n    if (!this.medicalOperations) {\n      throw new Error('Medical MCP server not connected');\n    }\n    return this.medicalOperations;\n  }\n\n  public getEpicOperations(): EpicFHIROperations | undefined {\n    return this.epicOperations;\n  }\n\n  public getAidboxOperations(): AidboxFHIROperations | undefined {\n    return this.aidboxOperations;\n  }\n\n  // Provider switching methods\n  public async switchProvider(provider: 'anthropic' | 'ozwell'): Promise<void> {\n    if (!this.config) {\n      throw new Error('MCP Client not initialized');\n    }\n\n    this.config.provider = provider;\n    console.log(` Switched to ${provider.toUpperCase()} provider with intelligent tool selection`);\n  }\n\n  public getCurrentProvider(): 'anthropic' | 'ozwell' | undefined {\n    return this.config?.provider;\n  }\n\n  public getAvailableProviders(): string[] {\n    const settings = (global as any).Meteor?.settings?.private;\n    const anthropicKey = settings?.ANTHROPIC_API_KEY || process.env.ANTHROPIC_API_KEY;\n    const ozwellKey = settings?.OZWELL_API_KEY || process.env.OZWELL_API_KEY;\n    \n    const providers = [];\n    if (anthropicKey) providers.push('anthropic');\n    if (ozwellKey) providers.push('ozwell');\n    \n    return providers;\n  }\n\n  public isReady(): boolean {\n    return this.isInitialized;\n  }\n\n  public getConfig(): MCPClientConfig | undefined {\n    return this.config;\n  }\n\n  public async shutdown(): Promise<void> {\n    console.log('Shutting down MCP Clients...');\n    \n    if (this.medicalConnection) {\n      this.medicalConnection.disconnect();\n    }\n    \n    if (this.aidboxConnection) {\n      this.aidboxConnection.disconnect();\n    }\n    \n    if (this.epicConnection) {\n      this.epicConnection.disconnect();\n    }\n    \n    this.isInitialized = false;\n  }\n}","import { Meteor } from 'meteor/meteor';\n\ninterface MCPRequest {\n  jsonrpc: '2.0';\n  method: string;\n  params: any;\n  id: string | number;\n}\n\ninterface MCPResponse {\n  jsonrpc: '2.0';\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n  };\n  id: string | number;\n}\n\nexport class MedicalServerConnection {\n  private baseUrl: string;\n  private sessionId: string | null = null;\n  private isInitialized = false;\n  private requestId = 1;\n\n  constructor(baseUrl: string = 'http://localhost:3005') {\n    this.baseUrl = baseUrl.replace(/\\/$/, ''); // Remove trailing slash\n  }\n\n  async connect(): Promise<void> {\n    try {\n      console.log(` Connecting to Medical MCP Server at: ${this.baseUrl}`);\n      \n      // Test if server is running\n      const healthCheck = await this.checkServerHealth();\n      if (!healthCheck.ok) {\n        throw new Error(`MCP Server not responding at ${this.baseUrl}. Please ensure it's running in HTTP mode.`);\n      }\n\n      // Initialize the connection with proper MCP protocol using Streamable HTTP\n      const initResult = await this.sendRequest('initialize', {\n        protocolVersion: '2024-11-05',\n        capabilities: {\n          roots: {\n            listChanged: false\n          }\n        },\n        clientInfo: {\n          name: 'meteor-medical-client',\n          version: '1.0.0'\n        }\n      });\n\n      console.log(' MCP Initialize result:', initResult);\n\n      // Send initialized notification\n      await this.sendNotification('notifications/initialized', {});\n\n      // Test by listing tools\n      const toolsResult = await this.sendRequest('tools/list', {});\n      console.log(`MCP Streamable HTTP Connection successful! Found ${toolsResult.tools?.length || 0} tools`);\n      \n      if (toolsResult.tools) {\n        console.log(' Available tools:');\n        toolsResult.tools.forEach((tool: any, index: number) => {\n          console.log(`   ${index + 1}. ${tool.name} - ${tool.description}`);\n        });\n      }\n\n      this.isInitialized = true;\n      \n    } catch (error) {\n      console.error(' Failed to connect to MCP Server via Streamable HTTP:', error);\n      throw error;\n    }\n  }\n\n  private async checkServerHealth(): Promise<{ ok: boolean; error?: string }> {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: AbortSignal.timeout(5000) // 5 second timeout\n      });\n\n      if (response.ok) {\n        const health = await response.json();\n        console.log(' MCP Server health check passed:', health);\n        return { ok: true };\n      } else {\n        return { ok: false, error: `Server returned ${response.status}` };\n      }\n    } catch (error: any) {\n      return { ok: false, error: error.message };\n    }\n  }\n\n  private async sendRequest(method: string, params: any): Promise<any> {\n    if (!this.baseUrl) {\n      throw new Error('MCP Server not connected');\n    }\n\n    const id = this.requestId++;\n    const request: MCPRequest = {\n      jsonrpc: '2.0',\n      method,\n      params,\n      id\n    };\n\n    try {\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json, text/event-stream', // Streamable HTTP: Must accept both JSON and SSE\n      };\n\n      // Add session ID if we have one (Streamable HTTP session management)\n      if (this.sessionId) {\n        headers['mcp-session-id'] = this.sessionId;\n      }\n\n      console.log(` Sending Streamable HTTP request: ${method}`, { id, sessionId: this.sessionId });\n\n      const response = await fetch(`${this.baseUrl}/mcp`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(request),\n        signal: AbortSignal.timeout(30000) // 30 second timeout\n      });\n\n      // Extract session ID from response headers if present (Streamable HTTP session management)\n      const responseSessionId = response.headers.get('mcp-session-id');\n      if (responseSessionId && !this.sessionId) {\n        this.sessionId = responseSessionId;\n        console.log(' Received session ID:', this.sessionId);\n      }\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${response.statusText}. Response: ${errorText}`);\n      }\n\n      // Check content type - Streamable HTTP should return JSON for most responses\n      const contentType = response.headers.get('content-type');\n      \n      // Handle SSE upgrade (optional in Streamable HTTP for streaming responses)\n      if (contentType && contentType.includes('text/event-stream')) {\n        console.log(' Server upgraded to SSE for streaming response');\n        return await this.handleStreamingResponse(response);\n      }\n\n      // Standard JSON response\n      if (!contentType || !contentType.includes('application/json')) {\n        const responseText = await response.text();\n        console.error(' Unexpected content type:', contentType);\n        console.error(' Response text:', responseText.substring(0, 200));\n        throw new Error(`Expected JSON response but got ${contentType}`);\n      }\n\n      const result: MCPResponse = await response.json();\n\n      if (result.error) {\n        throw new Error(`MCP error ${result.error.code}: ${result.error.message}`);\n      }\n\n      console.log(` Streamable HTTP request ${method} successful`);\n      return result.result;\n      \n    } catch (error: any) {\n      console.error(` Streamable HTTP request failed for method ${method}:`, error);\n      throw error;\n    }\n  }\n\n  private async handleStreamingResponse(response: Response): Promise<any> {\n    // Handle SSE streaming response (optional part of Streamable HTTP)\n    return new Promise((resolve, reject) => {\n      const reader = response.body?.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let result: any = null;\n\n      const processChunk = async () => {\n        try {\n          const { done, value } = await reader!.read();\n          \n          if (done) {\n            if (result) {\n              resolve(result);\n            } else {\n              reject(new Error('No result received from streaming response'));\n            }\n            return;\n          }\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const data = line.slice(6); // Remove 'data: ' prefix\n                if (data === '[DONE]') {\n                  resolve(result);\n                  return;\n                }\n                \n                const parsed = JSON.parse(data);\n                if (parsed.result) {\n                  result = parsed.result;\n                } else if (parsed.error) {\n                  reject(new Error(parsed.error.message));\n                  return;\n                }\n              } catch (e) {\n                // Skip invalid JSON lines\n                console.warn('Failed to parse SSE data:', data);\n              }\n            }\n          }\n\n          // Continue reading\n          processChunk();\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      processChunk();\n\n      // Timeout for streaming responses\n      setTimeout(() => {\n        reader?.cancel();\n        reject(new Error('Streaming response timeout'));\n      }, 60000); // 60 second timeout for streaming\n    });\n  }\n\nprivate async sendNotification(method: string, params: any): Promise<void> {\n  const notification = {\n    jsonrpc: '2.0',\n    method,\n    params\n  };\n\n  try {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json, text/event-stream',\n    };\n\n    if (this.sessionId) {\n      headers['mcp-session-id'] = this.sessionId;\n    }\n\n    console.log(` Sending notification: ${method}`, { sessionId: this.sessionId });\n\n    const response = await fetch(`${this.baseUrl}/mcp`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(notification),\n      signal: AbortSignal.timeout(10000)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`Notification ${method} failed: ${response.status} - ${errorText}`);\n      throw new Error(`Notification ${method} failed: ${response.status} - ${errorText}`);\n    } else {\n      console.log(` Notification ${method} sent successfully`);\n    }\n  } catch (error) {\n    console.error(`Notification ${method} failed:`, error);\n    throw error; // Re-throw to stop initialization if notification fails\n  }\n}\n\n  async listTools(): Promise<any> {\n    if (!this.isInitialized) {\n      throw new Error('MCP Server not initialized');\n    }\n\n    return this.sendRequest('tools/list', {});\n  }\n\n  async callTool(name: string, args: any): Promise<any> {\n    if (!this.isInitialized) {\n      throw new Error('MCP Server not initialized');\n    }\n\n    return this.sendRequest('tools/call', {\n      name,\n      arguments: args\n    });\n  }\n\n  disconnect() {\n    // For Streamable HTTP, we can optionally send a DELETE request to clean up the session\n    if (this.sessionId) {\n      try {\n        fetch(`${this.baseUrl}/mcp`, {\n          method: 'DELETE',\n          headers: {\n            'mcp-session-id': this.sessionId,\n            'Content-Type': 'application/json'\n          }\n        }).catch(() => {\n          // Ignore errors on disconnect\n        });\n      } catch (error) {\n        // Ignore errors on disconnect\n      }\n    }\n    \n    this.sessionId = null;\n    this.isInitialized = false;\n    console.log('📋 Disconnected from MCP Server');\n  }\n}\n\n// Medical operations implementation for Streamable HTTP transport\nexport interface MedicalDocumentOperations {\n  uploadDocument(file: Buffer, filename: string, mimeType: string, metadata: any): Promise<any>;\n  searchDocuments(query: string, options?: any): Promise<any>;\n  listDocuments(options?: any): Promise<any>;\n  extractMedicalEntities(text: string, documentId?: string): Promise<any>;\n  findSimilarCases(criteria: any): Promise<any>;\n  analyzePatientHistory(patientId: string, options?: any): Promise<any>;\n  getMedicalInsights(query: string, context?: any): Promise<any>;\n  \n  // Legacy methods for backward compatibility\n  extractText(documentId: string): Promise<any>;\n  searchByDiagnosis(patientIdentifier: string, diagnosisQuery?: string, sessionId?: string): Promise<any>;\n  semanticSearch(query: string, patientId?: string): Promise<any>;\n  getPatientSummary(patientIdentifier: string): Promise<any>;\n}\n\nexport function createMedicalOperations(connection: MedicalServerConnection): MedicalDocumentOperations {\n  return {\n    // New tool methods using the exact tool names from your server\n    async uploadDocument(file: Buffer, filename: string, mimeType: string, metadata: any) {\n      const result = await connection.callTool('uploadDocument', {\n        title: filename,\n        fileBuffer: file.toString('base64'),\n        metadata: {\n          ...metadata,\n          fileType: mimeType.split('/')[1] || 'unknown',\n          size: file.length\n        }\n      });\n      \n      // Parse the result if it's in the content array format\n      if (result.content && result.content[0] && result.content[0].text) {\n        try {\n          return JSON.parse(result.content[0].text);\n        } catch (e) {\n          return result;\n        }\n      }\n      return result;\n    },\n\n    async searchDocuments(query: string, options: any = {}) {\n      const result = await connection.callTool('searchDocuments', {\n        query,\n        limit: options.limit || 10,\n        threshold: options.threshold || 0.7,\n        filter: options.filter || {}\n      });\n      \n      if (result.content && result.content[0] && result.content[0].text) {\n        try {\n          return JSON.parse(result.content[0].text);\n        } catch (e) {\n          return result;\n        }\n      }\n      return result;\n    },\n\n    async listDocuments(options: any = {}) {\n      const result = await connection.callTool('listDocuments', {\n        limit: options.limit || 20,\n        offset: options.offset || 0,\n        filter: options.filter || {}\n      });\n      \n      if (result.content && result.content[0] && result.content[0].text) {\n        try {\n          return JSON.parse(result.content[0].text);\n        } catch (e) {\n          return result;\n        }\n      }\n      return result;\n    },\n\n    async extractMedicalEntities(text: string, documentId?: string) {\n      const result = await connection.callTool('extractMedicalEntities', {\n        text,\n        documentId\n      });\n      \n      if (result.content && result.content[0] && result.content[0].text) {\n        try {\n          return JSON.parse(result.content[0].text);\n        } catch (e) {\n          return result;\n        }\n      }\n      return result;\n    },\n\n    async findSimilarCases(criteria: any) {\n      const result = await connection.callTool('findSimilarCases', criteria);\n      \n      if (result.content && result.content[0] && result.content[0].text) {\n        try {\n          return JSON.parse(result.content[0].text);\n        } catch (e) {\n          return result;\n        }\n      }\n      return result;\n    },\n\n    async analyzePatientHistory(patientId: string, options: any = {}) {\n      const result = await connection.callTool('analyzePatientHistory', {\n        patientId,\n        analysisType: options.analysisType || 'summary',\n        dateRange: options.dateRange\n      });\n      \n      if (result.content && result.content[0] && result.content[0].text) {\n        try {\n          return JSON.parse(result.content[0].text);\n        } catch (e) {\n          return result;\n        }\n      }\n      return result;\n    },\n\n    async getMedicalInsights(query: string, context: any = {}) {\n      const result = await connection.callTool('getMedicalInsights', {\n        query,\n        context,\n        limit: context.limit || 5\n      });\n      \n      if (result.content && result.content[0] && result.content[0].text) {\n        try {\n          return JSON.parse(result.content[0].text);\n        } catch (e) {\n          return result;\n        }\n      }\n      return result;\n    },\n\n    // Legacy compatibility methods\n    async extractText(documentId: string) {\n      // This might not exist as a separate tool, try to get document content\n      const result = await connection.callTool('listDocuments', {\n        filter: { _id: documentId },\n        limit: 1\n      });\n      \n      if (result.content && result.content[0] && result.content[0].text) {\n        try {\n          const parsed = JSON.parse(result.content[0].text);\n          if (parsed.documents && parsed.documents[0]) {\n            return {\n              success: true,\n              extractedText: parsed.documents[0].content,\n              confidence: 100\n            };\n          }\n        } catch (e) {\n          // fallback\n        }\n      }\n      \n      throw new Error('Text extraction not supported - use document content from upload result');\n    },\n\n    async searchByDiagnosis(patientIdentifier: string, diagnosisQuery?: string, sessionId?: string) {\n      return await this.searchDocuments(diagnosisQuery || patientIdentifier, {\n        filter: { patientId: patientIdentifier },\n        limit: 10\n      });\n    },\n\n    async semanticSearch(query: string, patientId?: string) {\n      return await this.searchDocuments(query, {\n        filter: patientId ? { patientId } : {},\n        limit: 5\n      });\n    },\n\n    async getPatientSummary(patientIdentifier: string) {\n      return await this.analyzePatientHistory(patientIdentifier, {\n        analysisType: 'summary'\n      });\n    }\n  };\n}","import { Mongo } from 'meteor/mongo';\n\nexport interface Message {\n  _id?: string;\n  content: string;\n  role: 'user' | 'assistant';\n  timestamp: Date;\n  sessionId: string;\n}\n\nexport const MessagesCollection = new Mongo.Collection<Message>('messages');","import { Meteor } from 'meteor/meteor';\nimport { check, Match } from 'meteor/check';\nimport { MessagesCollection, Message } from './messages';\nimport { SessionsCollection } from '../sessions/sessions';\nimport { MCPClientManager } from '/imports/api/mcp/mcpClientManager';\nimport { ContextManager } from '../context/contextManager';\n\n// Meteor Methods\nMeteor.methods({\n  async 'messages.insert'(messageData: Omit<Message, '_id'>) {\n    check(messageData, {\n      content: String,\n      role: String,\n      timestamp: Date,\n      sessionId: String\n    });\n\n    const messageId = await MessagesCollection.insertAsync(messageData);\n    \n    // Update context if session exists\n    if (messageData.sessionId) {\n      await ContextManager.updateContext(messageData.sessionId, {\n        ...messageData,\n        _id: messageId\n      });\n      \n      // Update session\n      await SessionsCollection.updateAsync(messageData.sessionId, {\n        $set: {\n          lastMessage: messageData.content.substring(0, 100),\n          updatedAt: new Date()\n        },\n        $inc: { messageCount: 1 }\n      });\n      \n      // Auto-generate title after first user message\n      const session = await SessionsCollection.findOneAsync(messageData.sessionId);\n      if (session && session.messageCount <= 2 && messageData.role === 'user') {\n        Meteor.setTimeout(() => {\n          Meteor.call('sessions.generateTitle', messageData.sessionId);\n        }, 100);\n      }\n    }\n    \n    return messageId;\n  },\n\n  async 'mcp.processQuery'(query: string, sessionId?: string) {\n    check(query, String);\n    check(sessionId, Match.Maybe(String));\n    \n    if (!this.isSimulation) {\n      const mcpManager = MCPClientManager.getInstance();\n      \n      if (!mcpManager.isReady()) {\n        return 'MCP Client is not ready. Please check your API configuration.';\n      }\n      \n      try {\n        console.log(` Processing query with intelligent tool selection: \"${query}\"`);\n        \n        // Build context for the query\n        const context: any = { sessionId };\n        \n        if (sessionId) {\n          // Get session context\n          const session = await SessionsCollection.findOneAsync(sessionId);\n          if (session?.metadata?.patientId) {\n            context.patientId = session.metadata.patientId;\n          }\n          \n          // Get conversation context\n          const contextData = await ContextManager.getContext(sessionId);\n          context.conversationContext = contextData;\n        }\n        \n        // Let Claude intelligently decide what tools to use (includes Epic tools)\n        const response = await mcpManager.processQueryWithIntelligentToolSelection(query, context);\n        \n        // Update context after processing\n        if (sessionId) {\n          await extractAndUpdateContext(query, response, sessionId);\n        }\n        \n        return response;\n      } catch (error) {\n        console.error('Intelligent MCP processing error:', error);\n        \n        // Provide helpful error messages based on the error type\n        if (error.message.includes('not connected')) {\n          return 'I\\'m having trouble connecting to the medical data systems. Please ensure the MCP servers are running and try again.';\n        } else if (error.message.includes('Epic MCP Server')) {\n          return 'I\\'m having trouble connecting to the Epic EHR system. Please ensure the Epic MCP server is running and properly configured.';\n        } else if (error.message.includes('Aidbox')) {\n          return 'I\\'m having trouble connecting to the Aidbox FHIR system. Please ensure the Aidbox MCP server is running and properly configured.';\n        } else if (error.message.includes('API')) {\n          return 'I encountered an API error while processing your request. Please try again in a moment.';\n        } else {\n          return 'I encountered an error while processing your request. Please try rephrasing your question or contact support if the issue persists.';\n        }\n      }\n    }\n    \n    return 'Simulation mode - no actual processing';\n  },\n\n  async 'mcp.switchProvider'(provider: 'anthropic' | 'ozwell') {\n    check(provider, String);\n    \n    if (!this.isSimulation) {\n      const mcpManager = MCPClientManager.getInstance();\n      \n      if (!mcpManager.isReady()) {\n        throw new Meteor.Error('mcp-not-ready', 'MCP Client is not ready');\n      }\n      \n      try {\n        await mcpManager.switchProvider(provider);\n        return `Switched to ${provider.toUpperCase()} provider with intelligent tool selection`;\n      } catch (error) {\n        console.error('Provider switch error:', error);\n        throw new Meteor.Error('switch-failed', `Failed to switch provider: ${error.message}`);\n      }\n    }\n    \n    return 'Provider switched (simulation mode)';\n  },\n\n  'mcp.getCurrentProvider'() {\n    if (!this.isSimulation) {\n      const mcpManager = MCPClientManager.getInstance();\n      \n      if (!mcpManager.isReady()) {\n        return null;\n      }\n      \n      return mcpManager.getCurrentProvider();\n    }\n    \n    return 'anthropic';\n  },\n\n  'mcp.getAvailableProviders'() {\n    if (!this.isSimulation) {\n      const mcpManager = MCPClientManager.getInstance();\n      \n      if (!mcpManager.isReady()) {\n        return [];\n      }\n      \n      return mcpManager.getAvailableProviders();\n    }\n    \n    // Fallback for simulation\n    const settings = Meteor.settings?.private;\n    const anthropicKey = settings?.ANTHROPIC_API_KEY || process.env.ANTHROPIC_API_KEY;\n    const ozwellKey = settings?.OZWELL_API_KEY || process.env.OZWELL_API_KEY;\n    \n    const providers = [];\n    if (anthropicKey) providers.push('anthropic');\n    if (ozwellKey) providers.push('ozwell');\n    \n    return providers;\n  },\n\n  'mcp.getAvailableTools'() {\n    if (!this.isSimulation) {\n      const mcpManager = MCPClientManager.getInstance();\n      \n      if (!mcpManager.isReady()) {\n        return [];\n      }\n      \n      return mcpManager.getAvailableTools();\n    }\n    \n    return [];\n  },\n\n  // Server health check method - includes Epic\n  async 'mcp.healthCheck'() {\n    if (this.isSimulation) {\n      return {\n        status: 'healthy',\n        message: 'All systems operational (simulation mode)',\n        servers: {\n          epic: 'simulated',\n          aidbox: 'simulated',\n          medical: 'simulated'\n        }\n      };\n    }\n\n    const mcpManager = MCPClientManager.getInstance();\n    \n    if (!mcpManager.isReady()) {\n      return {\n        status: 'error',\n        message: 'MCP Client not ready',\n        servers: {}\n      };\n    }\n\n    try {\n      const health = await mcpManager.healthCheck();\n      return {\n        status: 'healthy',\n        message: 'Health check completed',\n        servers: {\n          epic: health.epic ? 'healthy' : 'unavailable',\n          aidbox: health.aidbox ? 'healthy' : 'unavailable'\n        },\n        timestamp: new Date()\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: `Health check failed: ${error.message}`,\n        servers: {},\n        timestamp: new Date()\n      };\n    }\n  },\n\n  // Medical document methods (existing)\nasync 'medical.uploadDocument'(fileData: {\n  filename: string;\n  content: string;\n  mimeType: string;\n  patientName?: string;\n  sessionId?: string;\n}) {\n  check(fileData, {\n    filename: String,\n    content: String,\n    mimeType: String,\n    patientName: Match.Maybe(String),\n    sessionId: Match.Maybe(String)\n  });\n\n  console.log(`  Upload request for: ${fileData.filename} (${fileData.mimeType})`);\n  console.log(` Content size: ${fileData.content.length} chars`);\n\n  if (this.isSimulation) {\n    console.log(' Simulation mode - returning mock document ID');\n    return { \n      success: true, \n      documentId: 'sim-' + Date.now(),\n      message: 'Document uploaded (simulation mode)'\n    };\n  }\n\n  const mcpManager = MCPClientManager.getInstance();\n  \n  if (!mcpManager.isReady()) {\n    console.error(' MCP Client not ready');\n    throw new Meteor.Error('mcp-not-ready', 'Medical document system is not available. Please contact administrator.');\n  }\n\n  try {\n    // Validate base64 content\n    if (!fileData.content || fileData.content.length === 0) {\n      throw new Error('File content is empty');\n    }\n\n    // Validate file size (base64 encoded, so actual file is ~75% of this)\n    const estimatedFileSize = (fileData.content.length * 3) / 4;\n    if (estimatedFileSize > 10 * 1024 * 1024) {\n      throw new Error('File too large (max 10MB)');\n    }\n\n    console.log(` Estimated file size: ${Math.round(estimatedFileSize / 1024)}KB`);\n\n    const medical = mcpManager.getMedicalOperations();\n    \n    // Convert base64 back to buffer for MCP server\n    const fileBuffer = Buffer.from(fileData.content, 'base64');\n    \n    const result = await medical.uploadDocument(\n      fileBuffer,\n      fileData.filename,\n      fileData.mimeType,\n      {\n        patientName: fileData.patientName || 'Unknown Patient',\n        sessionId: fileData.sessionId || this.connection?.id || 'default',\n        uploadedBy: this.userId || 'anonymous',\n        uploadDate: new Date().toISOString()\n      }\n    );\n    \n    console.log(' MCP upload successful:', result);\n    \n    // Update session metadata if we have session ID\n    if (fileData.sessionId && result.documentId) {\n      try {\n        await SessionsCollection.updateAsync(fileData.sessionId, {\n          $addToSet: {\n            'metadata.documentIds': result.documentId\n          },\n          $set: {\n            'metadata.patientId': fileData.patientName || 'Unknown Patient',\n            'metadata.lastUpload': new Date()\n          }\n        });\n        console.log(' Session metadata updated');\n      } catch (updateError) {\n        console.warn(' Failed to update session metadata:', updateError);\n        // Don't fail the whole operation for this\n      }\n    }\n    \n    return result;\n    \n  } catch (error: any) {\n    console.error(' Document upload error:', error);\n    \n    // Provide specific error messages\n    if (error.message?.includes('not connected') || error.message?.includes('ECONNREFUSED')) {\n      throw new Meteor.Error('medical-server-offline', 'Medical document server is not available. Please contact administrator.');\n    } else if (error.message?.includes('File too large')) {\n      throw new Meteor.Error('file-too-large', 'File is too large. Maximum size is 10MB.');\n    } else if (error.message?.includes('Invalid file type')) {\n      throw new Meteor.Error('invalid-file-type', 'Invalid file type. Please use PDF or image files only.');\n    } else if (error.message?.includes('timeout')) {\n      throw new Meteor.Error('upload-timeout', 'Upload timed out. Please try again with a smaller file.');\n    } else {\n      throw new Meteor.Error('upload-failed', `Upload failed: ${error.message || 'Unknown error'}`);\n    }\n  }\n},\n\n\n  async 'medical.processDocument'(documentId: string, sessionId?: string) {\n    check(documentId, String);\n    check(sessionId, Match.Maybe(String));\n\n    if (this.isSimulation) {\n      return {\n        success: true,\n        message: 'Document processed (simulation mode)',\n        textExtraction: { extractedText: 'Sample text', confidence: 95 },\n        medicalEntities: { entities: [], summary: { diagnosisCount: 0, medicationCount: 0, labResultCount: 0 } }\n      };\n    }\n\n    const mcpManager = MCPClientManager.getInstance();\n    \n    if (!mcpManager.isReady()) {\n      throw new Meteor.Error('mcp-not-ready', 'MCP Client is not ready');\n    }\n\n    try {\n      const medical = mcpManager.getMedicalOperations();\n      \n      // Process document using intelligent tool selection\n      const result = await medical.extractMedicalEntities('', documentId);\n      \n      return result;\n      \n    } catch (error) {\n      console.error(' Document processing error:', error);\n      throw new Meteor.Error('processing-failed', `Failed to process document: ${error.message || 'Unknown error'}`);\n    }\n  }\n});\n\n// Helper function to extract and update context\nasync function extractAndUpdateContext(\n  query: string, \n  response: string, \n  sessionId: string\n): Promise<void> {\n  try {\n    // Extract patient name from query\n    const patientMatch = query.match(/(?:patient|for)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)?)/i);\n    if (patientMatch) {\n      await SessionsCollection.updateAsync(sessionId, {\n        $set: { 'metadata.patientId': patientMatch[1] }\n      });\n    }\n    \n    // Extract medical terms from response\n    const medicalTerms = extractMedicalTermsFromResponse(response);\n    if (medicalTerms.length > 0) {\n      await SessionsCollection.updateAsync(sessionId, {\n        $addToSet: {\n          'metadata.tags': { $each: medicalTerms }\n        }\n      });\n    }\n    \n    // Extract data sources mentioned in response\n    const dataSources = extractDataSources(response);\n    if (dataSources.length > 0) {\n      await SessionsCollection.updateAsync(sessionId, {\n        $addToSet: {\n          'metadata.dataSources': { $each: dataSources }\n        }\n      });\n    }\n  } catch (error) {\n    console.error('Error updating context:', error);\n  }\n}\n\nfunction extractMedicalTermsFromResponse(response: string): string[] {\n  const medicalPatterns = [\n    /\\b(?:diagnosed with|diagnosis of)\\s+([^,.]+)/gi,\n    /\\b(?:prescribed|medication)\\s+([^,.]+)/gi,\n    /\\b(?:treatment for|treating)\\s+([^,.]+)/gi,\n    /\\b(?:condition|disease):\\s*([^,.]+)/gi\n  ];\n  \n  const terms = new Set<string>();\n  \n  medicalPatterns.forEach(pattern => {\n    let match;\n    while ((match = pattern.exec(response)) !== null) {\n      if (match[1]) {\n        terms.add(match[1].trim().toLowerCase());\n      }\n    }\n  });\n  \n  return Array.from(terms).slice(0, 10);\n}\n\nfunction extractDataSources(response: string): string[] {\n  const sources = new Set<string>();\n  \n  // Detect data sources mentioned in response\n  if (response.toLowerCase().includes('aidbox') || response.toLowerCase().includes('fhir')) {\n    sources.add('Aidbox FHIR');\n  }\n  \n  if (response.toLowerCase().includes('epic') || response.toLowerCase().includes('ehr')) {\n    sources.add('Epic EHR');\n  }\n  \n  if (response.toLowerCase().includes('document') || response.toLowerCase().includes('uploaded')) {\n    sources.add('Medical Documents');\n  }\n  \n  return Array.from(sources);\n}\n\n// Utility function to sanitize patient names (used by intelligent tool selection)\nfunction sanitizePatientName(name: string): string {\n  return name\n    .trim()\n    .replace(/[^a-zA-Z\\s]/g, '') // Remove special characters\n    .replace(/\\s+/g, ' ') // Normalize whitespace\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n}\n\n// Export utility functions for testing and reuse\nexport {\n  extractAndUpdateContext,\n  extractMedicalTermsFromResponse,\n  extractDataSources,\n  sanitizePatientName\n};","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { MessagesCollection } from './messages';\n\nMeteor.publish('messages', function(sessionId: string) {\n  check(sessionId, String);\n  return MessagesCollection.find({ sessionId });\n});","import { Meteor } from 'meteor/meteor';\nimport { check, Match } from 'meteor/check';\nimport { SessionsCollection, ChatSession } from './sessions';\nimport { MessagesCollection } from '../messages/messages';\n\nMeteor.methods({\n  async 'sessions.create'(title?: string, metadata?: any) {\n    check(title, Match.Maybe(String));\n    check(metadata, Match.Maybe(Object));\n\n    const session: Omit<ChatSession, '_id'> = {\n      title: title || 'New Chat',\n      userId: this.userId || undefined,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      messageCount: 0,\n      isActive: true,\n      metadata: metadata || {}\n    };\n    \n    // Deactivate other sessions for this user\n    if (this.userId) {\n      await SessionsCollection.updateAsync(\n        { userId: this.userId, isActive: true },\n        { $set: { isActive: false } },\n        { multi: true }\n      );\n    }\n    \n    const sessionId = await SessionsCollection.insertAsync(session);\n    console.log(`✅ Created new session: ${sessionId}`);\n    \n    return sessionId;\n  },\n  \n  async 'sessions.list'(limit = 20, offset = 0) {\n    check(limit, Match.Integer);\n    check(offset, Match.Integer);\n    \n    const userId = this.userId || null;\n    \n    const sessions = await SessionsCollection.find(\n      { userId },\n      { \n        sort: { updatedAt: -1 }, \n        limit,\n        skip: offset\n      }\n    ).fetchAsync();\n    \n    const total = await SessionsCollection.countDocuments({ userId });\n    \n    return {\n      sessions,\n      total,\n      hasMore: offset + limit < total\n    };\n  },\n  \n  async 'sessions.get'(sessionId: string) {\n    check(sessionId, String);\n    \n    const session = await SessionsCollection.findOneAsync({\n      _id: sessionId,\n      userId: this.userId || null\n    });\n    \n    if (!session) {\n      throw new Meteor.Error('session-not-found', 'Session not found');\n    }\n    \n    return session;\n  },\n  \n  async 'sessions.update'(sessionId: string, updates: Partial<ChatSession>) {\n    check(sessionId, String);\n    check(updates, Object);\n    \n    // Remove fields that shouldn't be updated directly\n    delete updates._id;\n    delete updates.userId;\n    delete updates.createdAt;\n    \n    const result = await SessionsCollection.updateAsync(\n      { \n        _id: sessionId,\n        userId: this.userId || null\n      },\n      { \n        $set: { \n          ...updates, \n          updatedAt: new Date() \n        } \n      }\n    );\n    \n    return result;\n  },\n  \n  async 'sessions.delete'(sessionId: string) {\n    check(sessionId, String);\n    \n    // Verify ownership\n    const session = await SessionsCollection.findOneAsync({\n      _id: sessionId,\n      userId: this.userId || null\n    });\n    \n    if (!session) {\n      throw new Meteor.Error('session-not-found', 'Session not found');\n    }\n    \n    // Delete all associated messages\n    const deletedMessages = await MessagesCollection.removeAsync({ sessionId });\n    console.log(`🗑️ Deleted ${deletedMessages} messages from session ${sessionId}`);\n    \n    // Delete the session\n    const result = await SessionsCollection.removeAsync(sessionId);\n    console.log(`🗑️ Deleted session ${sessionId}`);\n    \n    return { session: result, messages: deletedMessages };\n  },\n  \n  async 'sessions.setActive'(sessionId: string) {\n    check(sessionId, String);\n    \n    const userId = this.userId || null;\n    \n    // Deactivate all other sessions\n    await SessionsCollection.updateAsync(\n      { userId, isActive: true },\n      { $set: { isActive: false } },\n      { multi: true }\n    );\n    \n    // Activate this session\n    const result = await SessionsCollection.updateAsync(\n      { _id: sessionId, userId },\n      { \n        $set: { \n          isActive: true,\n          updatedAt: new Date()\n        } \n      }\n    );\n    \n    return result;\n  },\n  \n  async 'sessions.generateTitle'(sessionId: string) {\n    check(sessionId, String);\n    \n    // Get first few messages\n    const messages = await MessagesCollection.find(\n      { sessionId, role: 'user' },\n      { limit: 3, sort: { timestamp: 1 } }\n    ).fetchAsync();\n    \n    if (messages.length > 0) {\n      // Use first user message as basis for title\n      const firstUserMessage = messages[0];\n      if (firstUserMessage) {\n        // Clean up the message for a better title\n        let title = firstUserMessage.content\n          .replace(/^(search for|find|look for|show me)\\s+/i, '') // Remove common prefixes\n          .replace(/[?!.]$/, '') // Remove ending punctuation\n          .trim();\n        \n        // Limit length\n        if (title.length > 50) {\n          title = title.substring(0, 50).trim() + '...';\n        }\n        \n        // Capitalize first letter\n        title = title.charAt(0).toUpperCase() + title.slice(1);\n        \n        await SessionsCollection.updateAsync(sessionId, {\n          $set: { \n            title,\n            updatedAt: new Date()\n          }\n        });\n        \n        return title;\n      }\n    }\n    \n    return null;\n  },\n  \n  async 'sessions.updateMetadata'(sessionId: string, metadata: any) {\n    check(sessionId, String);\n    check(metadata, Object);\n    \n    const result = await SessionsCollection.updateAsync(\n      { \n        _id: sessionId,\n        userId: this.userId || null\n      },\n      { \n        $set: { \n          metadata,\n          updatedAt: new Date()\n        } \n      }\n    );\n    \n    return result;\n  },\n  \n  async 'sessions.export'(sessionId: string) {\n    check(sessionId, String);\n    \n    const session = await SessionsCollection.findOneAsync({\n      _id: sessionId,\n      userId: this.userId || null\n    });\n    \n    if (!session) {\n      throw new Meteor.Error('session-not-found', 'Session not found');\n    }\n    \n    const messages = await MessagesCollection.find(\n      { sessionId },\n      { sort: { timestamp: 1 } }\n    ).fetchAsync();\n    \n    return {\n      session,\n      messages,\n      exportedAt: new Date(),\n      version: '1.0'\n    };\n  },\n  \n  async 'sessions.import'(data: any) {\n    check(data, {\n      session: Object,\n      messages: Array,\n      version: String\n    });\n    \n    // Create new session based on imported data\n    const newSession: Omit<ChatSession, '_id'> = {\n      ...data.session,\n      title: `[Imported] ${data.session.title}`,\n      userId: this.userId || undefined,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      isActive: true\n    };\n    \n    delete (newSession as any)._id;\n    \n    const sessionId = await SessionsCollection.insertAsync(newSession);\n    \n    // Import messages with new sessionId\n    for (const message of data.messages) {\n      const newMessage = {\n        ...message,\n        sessionId,\n        timestamp: new Date(message.timestamp)\n      };\n      delete newMessage._id;\n      \n      await MessagesCollection.insertAsync(newMessage);\n    }\n    \n    return sessionId;\n  }\n});","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { SessionsCollection } from './sessions';\n\n// Publish user's sessions list\nMeteor.publish('sessions.list', function(limit = 20) {\n  check(limit, Number);\n  \n  const userId = this.userId || null;\n  \n  return SessionsCollection.find(\n    { userId },\n    { \n      sort: { updatedAt: -1 }, \n      limit,\n      fields: { \n        title: 1, \n        updatedAt: 1, \n        messageCount: 1, \n        lastMessage: 1,\n        isActive: 1,\n        createdAt: 1,\n        'metadata.patientId': 1,\n        'metadata.documentIds': 1\n      }\n    }\n  );\n});\n\n// Publish single session details\nMeteor.publish('session.details', function(sessionId: string) {\n  check(sessionId, String);\n  \n  return SessionsCollection.find({ \n    _id: sessionId,\n    userId: this.userId || null\n  });\n});\n\n// Publish active session\nMeteor.publish('session.active', function() {\n  const userId = this.userId || null;\n  \n  return SessionsCollection.find({ \n    userId,\n    isActive: true\n  }, {\n    limit: 1\n  });\n});\n\n// Publish recent sessions with message preview\nMeteor.publish('sessions.recent', function(limit = 5) {\n  check(limit, Number);\n  \n  const userId = this.userId || null;\n  \n  return SessionsCollection.find(\n    { userId },\n    { \n      sort: { updatedAt: -1 }, \n      limit,\n      fields: {\n        title: 1,\n        lastMessage: 1,\n        messageCount: 1,\n        updatedAt: 1,\n        isActive: 1\n      }\n    }\n  );\n});","import { Mongo } from 'meteor/mongo';\n\nexport interface ChatSession {\n  _id?: string;\n  title: string;\n  userId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  lastMessage?: string;\n  messageCount: number;\n  isActive: boolean;\n  metadata?: {\n    patientId?: string;\n    documentIds?: string[];\n    tags?: string[];\n    model?: string;\n    temperature?: number;\n  };\n}\n\nexport const SessionsCollection = new Mongo.Collection<ChatSession>('sessions');","import { Meteor } from 'meteor/meteor';\nimport { SessionsCollection } from '/imports/api/sessions/sessions';\nimport { MessagesCollection } from '/imports/api/messages/messages';\n\nMeteor.startup(async () => {\n  console.log(' Setting up session management...');\n  \n  // Create indexes for better performance\n  try {\n    // Sessions indexes\n    await SessionsCollection.createIndexAsync({ userId: 1, updatedAt: -1 });\n    await SessionsCollection.createIndexAsync({ isActive: 1 });\n    await SessionsCollection.createIndexAsync({ createdAt: -1 });\n    await SessionsCollection.createIndexAsync({ 'metadata.patientId': 1 });\n    \n    // Messages indexes\n    await MessagesCollection.createIndexAsync({ sessionId: 1, timestamp: 1 });\n    await MessagesCollection.createIndexAsync({ sessionId: 1, role: 1 });\n    \n    console.log(' Database indexes created successfully');\n  } catch (error) {\n    console.error(' Error creating indexes:', error);\n  }\n  \n  // Cleanup old sessions (optional - remove sessions older than 30 days)\n  const thirtyDaysAgo = new Date();\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n  \n  try {\n    const oldSessions = await SessionsCollection.find({\n      updatedAt: { $lt: thirtyDaysAgo }\n    }).fetchAsync();\n    \n    if (oldSessions.length > 0) {\n      console.log(`🧹 Found ${oldSessions.length} old sessions to clean up`);\n      \n      for (const session of oldSessions) {\n        await MessagesCollection.removeAsync({ sessionId: session._id });\n        await SessionsCollection.removeAsync(session._id);\n      }\n      \n      console.log(' Old sessions cleaned up');\n    }\n  } catch (error) {\n    console.error(' Error cleaning up old sessions:', error);\n  }\n  \n  // Log session statistics\n  try {\n    const totalSessions = await SessionsCollection.countDocuments();\n    const totalMessages = await MessagesCollection.countDocuments();\n    const activeSessions = await SessionsCollection.countDocuments({ isActive: true });\n    \n    console.log(' Session Statistics:');\n    console.log(`   Total sessions: ${totalSessions}`);\n    console.log(`   Active sessions: ${activeSessions}`);\n    console.log(`   Total messages: ${totalMessages}`);\n  } catch (error) {\n    console.error(' Error getting session statistics:', error);\n  }\n});","// server/main.ts\nimport { Meteor } from 'meteor/meteor';\nimport { MCPClientManager } from '/imports/api/mcp/mcpClientManager';\nimport '/imports/api/messages/methods';\nimport '/imports/api/messages/publications';\nimport '/imports/api/sessions/methods';\nimport '/imports/api/sessions/publications';\nimport './startup-sessions';\n\nMeteor.startup(async () => {\n  console.log(' Starting MCP Pilot server with Intelligent Tool Selection...');\n  \n  const mcpManager = MCPClientManager.getInstance();\n  \n  try {\n    // Get API keys\n    const settings = Meteor.settings?.private;\n    const anthropicKey = settings?.ANTHROPIC_API_KEY || process.env.ANTHROPIC_API_KEY;\n    const ozwellKey = settings?.OZWELL_API_KEY || process.env.OZWELL_API_KEY;\n    const ozwellEndpoint = settings?.OZWELL_ENDPOINT || process.env.OZWELL_ENDPOINT;\n    \n    console.log(' API Key Status:');\n    console.log('  Anthropic key found:', !!anthropicKey, anthropicKey?.substring(0, 15) + '...');\n    console.log('  Ozwell key found:', !!ozwellKey, ozwellKey?.substring(0, 15) + '...');\n    console.log('  Ozwell endpoint:', ozwellEndpoint);\n    \n    if (!anthropicKey && !ozwellKey) {\n      console.warn('  No API key found for intelligent tool selection.');\n      return;\n    }\n\n    // Determine default provider (prefer Anthropic for better tool calling, fallback to Ozwell)\n    let provider: 'anthropic' | 'ozwell';\n    let apiKey: string;\n\n    if (anthropicKey) {\n      provider = 'anthropic';\n      apiKey = anthropicKey;\n    } else if (ozwellKey) {\n      provider = 'ozwell';\n      apiKey = ozwellKey;\n    } else {\n      console.warn('  No valid API keys found');\n      return;\n    }\n\n    // Initialize main MCP client with intelligent tool selection\n    await mcpManager.initialize({\n      provider,\n      apiKey,\n      ozwellEndpoint,\n    });\n    \n    console.log(' MCP Client initialized with intelligent tool selection');\n    console.log(` MCP Using ${provider.toUpperCase()} as the AI provider for intelligent tool selection`);\n    console.log(' MCP Session management enabled with Atlas MongoDB');\n    \n    // Show provider capabilities\n    if (anthropicKey && ozwellKey) {\n      console.log(' MCP Both providers available - you can switch between them in the chat');\n      console.log('   MCP Anthropic: Advanced tool calling with Claude models (recommended)');\n      console.log('   MCP Ozwell: Bluehive AI models with intelligent prompting');\n    } else if (anthropicKey) {\n      console.log(' MCP Anthropic provider with native tool calling support');\n    } else {\n      console.log(` MCP Only ${provider.toUpperCase()} provider available`);\n    }\n\n    // Connect to medical MCP server for document tools\n    const mcpServerUrl = settings?.MEDICAL_MCP_SERVER_URL || \n                        process.env.MEDICAL_MCP_SERVER_URL || \n                        'http://localhost:3005';\n    \n    if (mcpServerUrl && mcpServerUrl !== 'DISABLED') {\n      try {\n        console.log(` Connecting to Medical MCP Server for intelligent tool discovery...`);\n        await mcpManager.connectToMedicalServer();\n        console.log(' Medical document tools discovered and ready for intelligent selection');\n      } catch (error) {\n        console.warn('  Medical MCP Server connection failed:', error);\n        console.warn('   Document processing tools will be unavailable for intelligent selection.');\n      }\n    } else {\n      console.warn('  Medical MCP Server URL not configured.');\n    }\n\n    // Connect to Aidbox MCP server for FHIR tools\n    const aidboxServerUrl = settings?.AIDBOX_MCP_SERVER_URL || \n                           process.env.AIDBOX_MCP_SERVER_URL || \n                           'http://localhost:3002';\n    \n    if (aidboxServerUrl && aidboxServerUrl !== 'DISABLED') {\n      try {\n        console.log(` Connecting to Aidbox MCP Server for intelligent FHIR tool discovery...`);\n        await mcpManager.connectToAidboxServer();\n        console.log(' Aidbox FHIR tools discovered and ready for intelligent selection');\n      } catch (error) {\n        console.warn('  Aidbox MCP Server connection failed:', error);  \n        console.warn('   Aidbox FHIR features will be unavailable for intelligent selection.');\n      }\n    } else {\n      console.warn('  Aidbox MCP Server URL not configured.');\n    }\n\n    // Connect to Epic MCP server for Epic EHR tools\n    const epicServerUrl = settings?.EPIC_MCP_SERVER_URL || \n                         process.env.EPIC_MCP_SERVER_URL || \n                         'http://localhost:3003';\n    \n    if (epicServerUrl && epicServerUrl !== 'DISABLED') {\n      try {\n        console.log(` Connecting to Epic MCP Server for intelligent EHR tool discovery...`);\n        await mcpManager.connectToEpicServer();\n        console.log(' Epic EHR tools discovered and ready for intelligent selection');\n      } catch (error) {\n        console.warn('  Epic MCP Server connection failed:', error);\n        console.warn('   Epic EHR features will be unavailable for intelligent selection.');\n      }\n    } else {\n      console.warn('  Epic MCP Server URL not configured.');\n    }\n    \n    // Log final status\n    const availableTools = mcpManager.getAvailableTools();\n    console.log(`\\n Intelligent Tool Selection Status:`);\n    console.log(`   Total tools available: ${availableTools.length}`);\n    console.log(`    AI Provider: ${provider.toUpperCase()}`);\n    console.log(`   Tool selection method: ${provider === 'anthropic' ? 'Native Claude tool calling' : 'Intelligent prompting'}`);\n    \n    // Log available tool categories\n    if (availableTools.length > 0) {\n      const toolCategories = categorizeTools(availableTools);\n      console.log('\\n🔧 Available Tool Categories:');\n      // Object.entries(toolCategories).forEach(([category, count]) => {\n      // console.log(`   ${getCategoryEmoji(category)} ${category}: ${count} tools`);\n      // });\n    }\n  \n    if (availableTools.length > 0) {\n      console.log('\\n SUCCESS: Claude will now intelligently select tools based on user queries!');\n      console.log('   • No more hardcoded patterns or keyword matching');\n      console.log('   • Claude analyzes each query and chooses appropriate tools');\n      console.log('   • Supports complex multi-step tool usage');\n      console.log('   • Automatic tool chaining and result interpretation');\n    } else {\n      console.log('\\n  No tools available - running in basic LLM mode');\n    }\n    \n    console.log('\\n Example queries that will work with intelligent tool selection:');\n    console.log('    Aidbox FHIR: \"Get me details about all Hank Preston available from Aidbox\"');\n    console.log('    Epic EHR: \"Search for patient Camila Lopez in Epic\"');\n    console.log('    Epic EHR: \"Get lab results for patient erXuFYUfucBZaryVksYEcMg3\"');\n    console.log('    Documents: \"Upload this lab report and find similar cases\"');\n    console.log('   Multi-tool: \"Search Epic for diabetes patients and get their medications\"');\n    \n  } catch (error) {\n    console.error('Failed to initialize intelligent tool selection:', error);\n    console.warn('Server will run with limited capabilities');\n    console.warn('Basic LLM responses will work, but no tool calling');\n  }\n});\n\n// Helper function to categorize tools for better logging\n// Fix for server/main.ts - Replace the categorizeTools function\n\nfunction categorizeTools(tools: any[]): Record<string, number> {\n  const categories: Record<string, number> = {};\n  \n  tools.forEach(tool => {\n    let category = 'Other';\n    \n    // Epic EHR tools - tools with 'epic' prefix\n    if (tool.name.toLowerCase().startsWith('epic')) {\n      category = 'Epic EHR';\n    }\n    // Aidbox FHIR tools - standard FHIR operations without 'epic' prefix from Aidbox\n    else if (isAidboxFHIRTool(tool)) {\n      category = 'Aidbox FHIR';\n    }\n    // Medical Document tools - document processing operations\n    else if (isDocumentTool(tool)) {\n      category = 'Medical Documents';\n    }\n    // Search & Analysis tools - AI/ML operations\n    else if (isSearchAnalysisTool(tool)) {\n      category = 'Search & Analysis';\n    }\n    \n    categories[category] = (categories[category] || 0) + 1;\n  });\n  \n  return categories;\n}\n\nfunction isAidboxFHIRTool(tool: any): boolean {\n  const aidboxFHIRToolNames = [\n    'searchPatients', 'getPatientDetails', 'createPatient', 'updatePatient',\n    'getPatientObservations', 'createObservation',\n    'getPatientMedications', 'createMedicationRequest',\n    'getPatientConditions', 'createCondition',\n    'getPatientEncounters', 'createEncounter'\n  ];\n  \n  // Must be in the Aidbox tool list AND not start with 'epic'\n  return aidboxFHIRToolNames.includes(tool.name) && \n         !tool.name.toLowerCase().startsWith('epic');\n}\n\nfunction isDocumentTool(tool: any): boolean {\n  const documentToolNames = [\n    'uploadDocument', 'searchDocuments', 'listDocuments',\n    'chunkAndEmbedDocument', 'generateEmbeddingLocal'\n  ];\n  \n  return documentToolNames.includes(tool.name);\n}\n\nfunction isSearchAnalysisTool(tool: any): boolean {\n  const analysisToolNames = [\n    'analyzePatientHistory', 'findSimilarCases', 'getMedicalInsights',\n    'extractMedicalEntities', 'semanticSearchLocal'\n  ];\n  \n  return analysisToolNames.includes(tool.name);\n}\n\n// Helper function to get emoji for tool categories\n// function getCategoryEmoji(category: string): string {\n//   const emojiMap: Record<string, string> = {\n//     'Epic EHR': '🏥',\n//     'Aidbox FHIR': '📋',\n//     'Medical Documents': '📄',\n//     'Search & Analysis': '🔍',\n//     'Other': '🔧'\n//   };\n  \n//   return emojiMap[category] || '🔧';\n// }\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('\\n Shutting down server...');\n  const mcpManager = MCPClientManager.getInstance();\n  \n  // Clear all context before shutdown\n  const { ContextManager } = require('/imports/api/context/contextManager');\n  ContextManager.clearAllContexts();\n  \n  mcpManager.shutdown().then(() => {\n    console.log(' Server shutdown complete');\n    process.exit(0);\n  }).catch((error) => {\n    console.error('Error during shutdown:', error);\n    process.exit(1);\n  });\n});\n\n// Handle uncaught errors\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});"]}